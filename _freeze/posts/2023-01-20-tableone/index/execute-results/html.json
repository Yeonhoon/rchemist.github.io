{
  "hash": "e804995786eab86194c9fbe1d6a3f493",
  "result": {
    "markdown": "---\ntitle: \"tableone으로 테이블 만들기\"\nsubtitle: \"Quarto, a substitute of Rmarkdown\"\ndescription:  \"Brief intorduction of Quarto\"\nauthor: \n  - name: \"JYH\"\n    orcid: 0000-0001-8090-6555\n    affiliation: HIRC Lab, SNUBH\ndate: '2023-01-20'\nformat: \n  html: \n    toc: true\n    toc-location: left\n    code-fold: true\n    code-tools:\n      source: true\n    reference-location: document\n    theme: cosmo\n    fontsize: 1.1em\n    linestretch: 1.5\ncategories: [tableone, R, table]\ndraft: true\n---\n\n\n논문을 작성할 때, 데이터의 특성을 요약하는 표를 작성해야 합니다. 각 집단별로 어떤 특성을 지니는지, 집단 간 어떤 차이가 존재하는지 평균 표준편차, 응답 빈도 등을 통해 확인합니다.\n\n이번 글에서는 데이터의 특성을 요약하게 표로 만들어주는 `tableone` 패키지에 대해 알아보도록 하겠습니다.\n\n------------------------------------------------------------------------\n\n### 1. 패키지 설치\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('tableone')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInstalling tableone [0.13.2] ...\n\tOK [linked cache]\n```\n:::\n:::\n\n\n패키지 설치가 완료되었다면 `library()`를 이용해 패키지를 불러옵니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tableone)\n```\n:::\n\n\n### 2. 테이블 그리기\n\ntableone의 `CreateTableOne()` 을 이용합니다.\n\n`CreateTableOne()` 에서 적용할 수 있는 인자는 크게 다음과 같습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# CreateTableOne(\n#   vars, # 테이블로 요약할 변수\n#   strata, # 나누어 확인하고자 하는 집단 변수\n#   addOverall, # 전체 데이터 요약 값 포함 여부\n#   data, # 테이블을 그릴 데이터\n#   factorVars, # 범주형 변수\n#   includeNA # 테이블에 결측치 포함 여부\n# )\n```\n:::\n\n\n`vars`, `factorVars` 등 data의 column 이름을 입력해줄 때는 `\"\"`를 이용해 문자형태로 입력해야 합니다.\n\n\n::: {.cell}\n\n:::\n\n\n`CreateTableOne()`은 `print()`과 함께 사용합니다. `print()`에서 범주가 2개인 categorical 변수들의 범주를 모두 표시하고 싶은 경우 `showAllLevels=T`를 통해 출력할 수 있습니다.\n\n\n::: {.cell}\n\n:::\n\n\n자세한 옵션은 `?print.Tableone`을 실행하여 확인하시기 바랍니다.\n\n만약 연속형 변수가 정규분포를 따르지 않아 `mean ± sd` 형식이 아닌 median \\[IQR\\] 형식으로 표현하기 위해선 `nonnormal` 인자를 채워넣으면 됩니다.\n\n\n::: {.cell}\n\n:::\n\n\n### 테이블 내보내기\n\n`CreateTableOne()` 을 이용해 만든 테이블은 다음과 같은 방식으로 출력할 수 있습니다.\n\n#### 1) `write.csv()`\n\n테이블을 .csv 파일로 내보낼 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (...) \n{\n    Call <- match.call(expand.dots = TRUE)\n    for (argname in c(\"append\", \"col.names\", \"sep\", \"dec\", \"qmethod\")) if (!is.null(Call[[argname]])) \n        warning(gettextf(\"attempt to set '%s' ignored\", argname), \n            domain = NA)\n    rn <- eval.parent(Call$row.names)\n    Call$append <- NULL\n    Call$col.names <- if (is.logical(rn) && !rn) \n        TRUE\n    else NA\n    Call$sep <- \",\"\n    Call$dec <- \".\"\n    Call$qmethod <- \"double\"\n    Call[[1L]] <- quote(utils::write.table)\n    eval.parent(Call)\n}\n<bytecode: 0x0000020c9d2e8978>\n<environment: namespace:utils>\n```\n:::\n:::\n\n\n#### 2) `kableExtra`이용\n\n`kableExtra` 패키지를 이용하여 워드나 엑셀 등에서 사용할 수 있도록 복사 가능한 형태의 테이블을 만들어줄 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('kableExtra')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInstalling kableExtra [1.3.4] ...\n\tOK [linked cache]\n```\n:::\n\n```{.r .cell-code}\nlibrary(kableExtra)\n# kableone()\n# kable_paper()\n```\n:::\n\n\n### Reference\n\n-   https://cran.r-project.org/web/packages/tableone/vignettes/introduction.html\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}