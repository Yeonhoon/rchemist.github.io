{
  "hash": "5c0f501b7019aca04dd74c3831a9308e",
  "result": {
    "markdown": "---\ntitle: \"Quarto 사용법\"\nsubtitle: \"Quarto, a substitute of Rmarkdown\"\ndescription:  \"Brief intorduction of Quarto\"\ndate: '2023-01-19'\ncategories: [Quarto, R]\nimage: \"https://quarto.org/quarto.png\"\n---\n\n\n## Quarto란?\n\nQuarto는 Rmarkdown을 계승하는 차세대 문서양식입니다.\n\n이미 아실지 모르겠지만, RStudio는 R 뿐만 아니라 Python까지 지원하고 있습니다 (`reticulate`란 패키지를 통해).\\\n다만 **R**studio 라는 이름 때문인지, Python 유저들은 jupyter를 주로 사용했던 것 같습니다.\\\n\n아무튼 2022년 12월 이후, RStudio사는 **POSIT**으로 사명을 변경하였습니다. 이는 RStudio가 R 사용자만을 위한 통합개발환경 (Integrated Development Environment, IDE)에서 벗어나 R, Python, Julia 등을 사용하는 모든 데이터 사이언티스들을 위한 IDE를 추구한다는 의미라고 볼 수 있습니다.\\\n\\\nQuarto 역시 마찬가지입니다. 전신이었던 Rmarkdown이 갖는 이름에서 벗어나 Quarto라는 새로운 이름을 통해 R과 Python 유저 모두 편리하게 사용할 수 있는 document 양식을 지향합니다.\n\n실제로 Quarto는 기존의 Rmarkdown 사용자를 위한 `knitr` 뿐만 아니라 python의 jupyter notebook 사용자들을 위한 `jupyter` 모드도 사용이 가능합니다.\n\n더 자세한 내용은 [Quarto](https://Quarto.org) 홈페이지를 참고하세요!\n\n------------------------------------------------------------------------\n\n## Quarto 준비하기\n\nQuarto를 사용하기 위해서는 `Quarto` 패키지를 설치해야 합니다.\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# not run\ninstall.packages('quarto')\n```\n:::\n\n\n`Quarto` 설치가 완료되었다면 RStudio의 좌측 상단에서 Quarto document를 생성할 수 있습니다.\n\n![quarto document 생성하기](quarto_document.png)\\\n\nQuarto document는 `.qmd` 확장자로 끝나는 파일입니다.\n\n`.qmd` 파일은 `Source` 에디터, `Visual` 에디터로 작업을 수행할 수 있습니다. 특히 Visual 에디터는 다양한 markdown 문법들을 단축키들을 활용해 원하는 문서를 쉽게 만들 수 있다는 장점이 있습니다.\n\n------------------------------------------------------------------------\n\n## Quarto의 구조\n\nQuarto는 크게 3가지의 부분으로 구성됩니다.\n\n### 1) YAML\n\n`YAML`은 **Y**AML **A**in't **M**arkup **L**anguage의 이름을 갖고 있는 언어로, 가독성에 초점을 두고 개발되었습니다.\\\n`Quarto`의 시작 부분에 문서 형식을 설정하는 용도로 `yaml`문법을 이용합니다.\\\n\n대표적으로 설정해줄 수 있는 옵션은 다음과 같습니다.\n\n-   `toc`: markdown의 목차를 한눈에 볼 수 있게 색인을 생성합니다.\n-   `toc-location`: toc의 위치를 설정합니다. `left`, `right`\n-   `code-fold`: r 코드 부분을 접거나 펼 수 있습니다.\n-   `theme`: Quarto의 문서 테마를 지정할 수 있습니다. [참고](https://Quarto.org/docs/output-formats/html-themes.html)\n\n그 외 설명은 [quarto 공식 홈페이지](https://blog.zarathu.com/posts/2019-01-03-rmarkdown/)를 참고하세요.\n\n### 2) R code\n\nr chunk를 만드는 방법은 (백틱``` `` ```)을 3번 입력하거나, 단축키(`ctrl+shift+i`)를 이용하면 됩니다.\\\n\n### 3) markdown\n\n간단한 markdown 문법을 소개합니다. quarto의 visual 에디터를 이용할 때의 단축키도 첨부합니다.\n\n#### Header\n\n제목과 같이 큰 글자는 `#`의 개수에 따라 달라집니다.\n\n#### 글자 옵션\n\nquarto에서 사용할 수 있는 텍스트 옵션들은 다음과 같습니다.\n\n-   굵게: **Asterisk (`ctrl + b`)**\n\n-   기울이기: *Asterisk (`ctrl + i`)*\n\n-   밑줄: <u> Asterisk </u> (`ctrl + u`)\n\n-   superscript: R^2^ (`^텍스트^`)\n\n-   subscript: HR~max~ - HR~min~ (`~텍스트~`)\n\n-   strike through : ~~밑줄찍찍~~ (`~~텍스트~~`)\n\n-   verbatim code: `Quarto` (`ctrl + d`)\n\n-   글자 색상 변경: [special]{style=\"color:red;\"} css 문법 활용하기.\n\n-   링크 삽입: [네이버](https://www.naver.com/)\n\n-   이미지 삽입: ![alternative description](https://Quarto.org/Quarto.png)\n\n-   blockquote : 문장 앞에 `>`를 붙여줍니다.\n\n> 인용구 등을 표시할 때 blockquote를 많이 사용합니다.\n\n#### List 출력\n\n##### 1) Unordered list (순서없는 리스트)\n\n-   Item 1\n    -   item 1-1\n    -   item 1-2\n        -   item 1-2-1\n        -   item 1-2-2\n\n##### 2) Ordered list (순서가 지정된 리스트)\n\n1.  item 1\n    1.  item 1-1\n\n    2.  item 1-2\n\n        1.  sub-item 1\n\n            a.  item 1\n\n자세한 markdown syntax는 [Quarto 홈페이지](https://quarto.org/docs/visual-editor/options.html)를 참고하세요.\n\n------------------------------------------------------------------------\n\n## Quarto 실행하기\n\n**Render** 버튼(shortcut: `ctrl` + `shift` + `k`)을 누르시면 html 문서가 생성됩니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nterminal 창의 명령어를 통해서도 실행 가능합니다. 해당 파일의 경로에서 아래의 명령어를 실행합니다.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nquarto render test.qmd --to html\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# | echo: true\n#| eval: false\n2 * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\ncode 출력과 관련된 옵션은 다음과 같습니다.\n\n-   `echo: false` 는 입력한 코드가 출력되지 않게 합니다.\n\n-   `eval: false`는 입력한 코드의 결과물이 출력되지 않게 합니다.\n\n-   `warning: false`는 코드 실행 시 나타나는 경고 메시지를 출력하지 않게 합니다.\\\n\n\n::: {.cell output-location='column'}\n\n````{.cell-code}\n```{{r}}\n#| warning: false\n#| message: false\n#| output-location: column\n#| label: fig-airquality\n#| fig-cap: Teup and ozone level\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone))+\n  geom_point()+\n  geom_smooth()\n```\n````\n\n::: {.cell-output-display}\n![Teup and ozone level](index_files/figure-html/fig-airquality-1.png){#fig-airquality width=672}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n### Callout\n\n::: callout-note\ncallout에는 5 종류가 있습니다.\n:::\n\n::: callout-warning\nWarning callout 입니다.\n:::\n\n::: callout-important\nImportant callout 입니다.\n:::\n\n::: callout-tip\nTip callout입니다.\n:::\n\n::: callout-caution\nCaution callout 입니다.\n:::\n\n### Tabsets\n\nmarkdown에서는 tab을 나누어 각각 화면을 출력할 수 있습니다.\n\n#### Split up and flip between sections\n\n::: panel-tabset\n##### Code\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| eval: false\nhead(mtcars)\n```\n````\n:::\n\n\n##### Output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mtcars)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|                  |  mpg| cyl| disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|\n|:-----------------|----:|---:|----:|---:|----:|-----:|-----:|--:|--:|----:|----:|\n|Mazda RX4         | 21.0|   6|  160| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|\n|Mazda RX4 Wag     | 21.0|   6|  160| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|\n|Datsun 710        | 22.8|   4|  108|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|\n|Hornet 4 Drive    | 21.4|   6|  258| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|\n|Hornet Sportabout | 18.7|   8|  360| 175| 3.15| 3.440| 17.02|  0|  0|    3|    2|\n|Valiant           | 18.1|   6|  225| 105| 2.76| 3.460| 20.22|  1|  0|    3|    1|\n\n</div>\n:::\n:::\n\n:::\n\n#### 그래프 출력하기\n\n\n::: {.cell layout=\"[[45,-10,45]]\" output-location='fragment'}\n\n```{.r .cell-code}\n# #|을 통해 r chunk의 옵션을 변경할 수 있습니다.\n# layout을 통해 figure의 위치를 조절할 수 있습니다.\n\nrequire(dplyr)\nrequire(ggplot2)\ncars |>\n  ggplot(aes(speed, dist)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![Speed and Stopping Distances of Cars](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmtcars |>\n  ggplot(aes(disp, mpg))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![Engine displacement and fuel efficiency in cars](index_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n:::\n\n\n### Reference\n\n-   https://quarto.org/docs/visual-editor/\n\n-   https://quarto.org/\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}