{
  "hash": "01716e0fa3b9ada8f435f4e028f61998",
  "result": {
    "markdown": "---\ntitle: \"tidyr로 Pivoting하기\"\ndescription: \"tidyr을 이용해 데이터의 형태를 바꾸는 pivoting에 대해 알아봅시다.\"\ndate: '2023-02-03'\ncategories: [R, dplyr, tidyr]\nimage: \"https://tidyr.tidyverse.org/logo.png\"\n---\n\n\n이번 시간에는 데이터의 형태를 변환시키는 pivoting을 배워보도록 하겠습니다.\n\n오늘 사용할 패키지는 다음과 같습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(dplyr)\n```\n:::\n\n\n::: callout-note\n`tidyr`의 'tidy'는 '정돈하다' 라는 뜻입니다. 데이터를 정돈하기 위해 사용하는 패키지라고 이해하시면 되겠습니다.\n:::\n\n### 1. Longer: 데이터 길게 늘이기\n\n#### 1) 열 이름에 문자 포함된 경우\n\n`pivot_longer()` 는 데이터 내의 행의 수를 늘리고, 열의 개수를 줄임으로서 데이터를 길게 만듭니다. 즉 여러 개의 열을 줄여 행으로 바꾸는 과정에서 자연스럽게 데이터의 형태가 길어지는 것을 의미합니다.\n\n`relig_income` 은 `tidyr` 패키지에 포함되어 있는 데이터셋으로, 사람들의 종교와 연소득 데이터가 들어있습니다.\n\n`pivot_longer()` 간단한 예시를 살펴보겠습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_income |> \n  pivot_longer(!religion,\n               names_to=\"income\",\n               values_to = \"values\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 180 × 3\n   religion income             values\n   <chr>    <chr>               <dbl>\n 1 Agnostic <$10k                  27\n 2 Agnostic $10-20k                34\n 3 Agnostic $20-30k                60\n 4 Agnostic $30-40k                81\n 5 Agnostic $40-50k                76\n 6 Agnostic $50-75k               137\n 7 Agnostic $75-100k              122\n 8 Agnostic $100-150k             109\n 9 Agnostic >150k                  84\n10 Agnostic Don't know/refused     96\n# … with 170 more rows\n```\n:::\n:::\n\n\npivot_longer()에서 사용된 인자는 다음과 같습니다.\n\n-   `relig_income`: 형태를 변환시킬 데이터\n\n-   `cols`: 데이터 내에서 길게 변환시킬 열들\n\n-   `names_to`: 열들이 길게 변환된 뒤, 새로운 열의 이름\n\n-   `values_to`: 길게 변환된 열들의 데이터가 갖게되는 새로운 열 이름\n\n정리하자면 `cols`에서는 기존 데이터셋에서 열들의 이름이 들어가는데, 이 열들은 `names_to`에서 정해준 `income`이라고 하는 하나의 열로 변환되고, cols에서 선택된 열들의 값들은 `values_to`에서 정해준 `values`라고 하는 하나의 열로 변환되는 것입니다.\n\n#### 2) 열 이름에 숫자가 포함된 경우\n\n다음으로 billboard 데이터로 pivot_longer를 진행해보겠습니다. billboard 데이터에는 2000년도의 빌보드 순위 주(week) 단위로 들어있습니다.\n\n이 데이터를 길게 바꾸면 다음과 같습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard |> \n  pivot_longer(\n    cols=starts_with('wk'),\n    names_to='week',\n    values_to='rank',\n    values_drop_na = T\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,307 × 5\n   artist  track                   date.entered week   rank\n   <chr>   <chr>                   <date>       <chr> <dbl>\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02   wk1      91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02   wk2      87\n10 2Ge+her The Hardest Part Of ... 2000-09-02   wk3      92\n# … with 5,297 more rows\n```\n:::\n:::\n\n\ncols에서 열들을 선택할 때, 규칙이 있는 열들은 dplyr의 `select()`에서 사용하던 `starts_with()` 등을 사용할 수 있습니다.\n\n또한 데이터를 길게 변환할 때, `values_drop_na`를 통해 NA인 데이터들은 제외하였습니다.\n\n데이터를 변환하니 `wk~` 열들이 전부 `week`라는 하나의 열로 변환되었습니다. 그런데 `week` 열의 데이터는 전부 `wk`가 들어가있습니다. 몇 주차인지 표현하기 위해서는 숫자만 있어도 될 것 같아 보입니다.\n\n이럴 때, `names_prefix` 인자를 통해 `wk` 접두사(prefix)를 없애주도록 하겠습니다.\n\n이 때, `names_prefix`가 추가되어도, `week` 의 데이터 유형은 그대로 `character`입니다. `week`를 숫자형태로 변환해주려면 `names_transform`을 이용하면 됩니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard |> \n  pivot_longer(\n    cols=starts_with('wk'),\n    names_to='week',\n    names_prefix = 'wk',\n    names_transform = as.integer,\n    values_to='rank',\n    values_drop_na = T\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,307 × 5\n   artist  track                   date.entered  week  rank\n   <chr>   <chr>                   <date>       <int> <dbl>\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26       1    87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26       2    82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26       3    72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26       4    77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26       5    87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26       6    94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26       7    99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02       1    91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02       2    87\n10 2Ge+her The Hardest Part Of ... 2000-09-02       3    92\n# … with 5,297 more rows\n```\n:::\n:::\n\n\n#### 3) 열들을 세부적으로 나누기\n\n다음으로는 좀더 까다로운 데이터를 길게 변환해보도록 하겠습니다. `tidyr` 의 `who` 데이터에는 `new_sp_m014` 부터 `newrel_f65` 까지, 네 종류의 값들이 열의 이름으로 들어가 있습니다.\n\n-   `new_` / `new`: 새로운 경우들을 값들을 나타냅니다.\n\n-   `sp` / `rel` / `ep` : 진단명\n\n-   `m` / `f`: 성별\n\n-   `014` / `1524` / `1524` / `3544` / `4554` / `65` : 나이 범위\n\n이 값들은 규칙을 띈 채로 열 이름으로 되어있기 때문에, name_pattern을 이용해 열 이름에서 추출할 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwho |> \n  pivot_longer(\n    cols=new_sp_m014:newrel_f65,\n    names_to= c('diagnosis','gender','age'),\n    names_pattern = \"new_?(.*)_(.)(.*)\", # 정규표현식\n    values_to=\"count\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 405,440 × 8\n   country     iso2  iso3   year diagnosis gender age   count\n   <chr>       <chr> <chr> <int> <chr>     <chr>  <chr> <int>\n 1 Afghanistan AF    AFG    1980 sp        m      014      NA\n 2 Afghanistan AF    AFG    1980 sp        m      1524     NA\n 3 Afghanistan AF    AFG    1980 sp        m      2534     NA\n 4 Afghanistan AF    AFG    1980 sp        m      3544     NA\n 5 Afghanistan AF    AFG    1980 sp        m      4554     NA\n 6 Afghanistan AF    AFG    1980 sp        m      5564     NA\n 7 Afghanistan AF    AFG    1980 sp        m      65       NA\n 8 Afghanistan AF    AFG    1980 sp        f      014      NA\n 9 Afghanistan AF    AFG    1980 sp        f      1524     NA\n10 Afghanistan AF    AFG    1980 sp        f      2534     NA\n# … with 405,430 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhousehold <- tibble(\n  family = 1:5,\n  dob_child1 = c('1998-11-26','1996-06-22','2002-07-11','2004-10-10','2000-12-05'),\n  dob_child2 = c('2000-01-29',NA,'2004-04-05','2009-08-27','2005-02-28'),\n  name_child1 = c('Susan','Mark','Sam','Craig','Parker'),\n  name_child2 = c('Jose',NA,'Seth','Khai','Gracie')\n)\n\nhousehold |> \n  pivot_longer(\n    cols = !family,\n    names_to=c('.value',\"child\"),\n    names_sep=\"_\",\n    values_drop_na = T,\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n  family child  dob        name  \n   <int> <chr>  <chr>      <chr> \n1      1 child1 1998-11-26 Susan \n2      1 child2 2000-01-29 Jose  \n3      2 child1 1996-06-22 Mark  \n4      3 child1 2002-07-11 Sam   \n5      3 child2 2004-04-05 Seth  \n6      4 child1 2004-10-10 Craig \n7      4 child2 2009-08-27 Khai  \n8      5 child1 2000-12-05 Parker\n9      5 child2 2005-02-28 Gracie\n```\n:::\n:::\n\n\n### 2. Wider: 데이터 넓게 펼치기\n\n#### 1) Capture-recapture\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfish_encounters |> \n  pivot_wider(\n    names_from = station,\n    values_from = seen\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 19 × 12\n   fish  Release I80_1 Lisbon  Rstr Base_TD   BCE   BCW  BCE2  BCW2   MAE   MAW\n   <fct>   <int> <int>  <int> <int>   <int> <int> <int> <int> <int> <int> <int>\n 1 4842        1     1      1     1       1     1     1     1     1     1     1\n 2 4843        1     1      1     1       1     1     1     1     1     1     1\n 3 4844        1     1      1     1       1     1     1     1     1     1     1\n 4 4845        1     1      1     1       1    NA    NA    NA    NA    NA    NA\n 5 4847        1     1      1    NA      NA    NA    NA    NA    NA    NA    NA\n 6 4848        1     1      1     1      NA    NA    NA    NA    NA    NA    NA\n 7 4849        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n 8 4850        1     1     NA     1       1     1     1    NA    NA    NA    NA\n 9 4851        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n10 4854        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n11 4855        1     1      1     1       1    NA    NA    NA    NA    NA    NA\n12 4857        1     1      1     1       1     1     1     1     1    NA    NA\n13 4858        1     1      1     1       1     1     1     1     1     1     1\n14 4859        1     1      1     1       1    NA    NA    NA    NA    NA    NA\n15 4861        1     1      1     1       1     1     1     1     1     1     1\n16 4862        1     1      1     1       1     1     1     1     1    NA    NA\n17 4863        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n18 4864        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n19 4865        1     1      1    NA      NA    NA    NA    NA    NA    NA    NA\n```\n:::\n:::\n\n\n이 데이터에서 결측 값 `NA` 는 0과 같습니다. 다시 말해, 물고기가 발견된 적이 없다는 것이죠. 그렇기 때문에 `NA`를 0으로 채워넣을 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfish_encounters |> \n  pivot_wider(\n    names_from = station,\n    values_from = seen,\n    values_fill = 0\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 19 × 12\n   fish  Release I80_1 Lisbon  Rstr Base_TD   BCE   BCW  BCE2  BCW2   MAE   MAW\n   <fct>   <int> <int>  <int> <int>   <int> <int> <int> <int> <int> <int> <int>\n 1 4842        1     1      1     1       1     1     1     1     1     1     1\n 2 4843        1     1      1     1       1     1     1     1     1     1     1\n 3 4844        1     1      1     1       1     1     1     1     1     1     1\n 4 4845        1     1      1     1       1     0     0     0     0     0     0\n 5 4847        1     1      1     0       0     0     0     0     0     0     0\n 6 4848        1     1      1     1       0     0     0     0     0     0     0\n 7 4849        1     1      0     0       0     0     0     0     0     0     0\n 8 4850        1     1      0     1       1     1     1     0     0     0     0\n 9 4851        1     1      0     0       0     0     0     0     0     0     0\n10 4854        1     1      0     0       0     0     0     0     0     0     0\n11 4855        1     1      1     1       1     0     0     0     0     0     0\n12 4857        1     1      1     1       1     1     1     1     1     0     0\n13 4858        1     1      1     1       1     1     1     1     1     1     1\n14 4859        1     1      1     1       1     0     0     0     0     0     0\n15 4861        1     1      1     1       1     1     1     1     1     1     1\n16 4862        1     1      1     1       1     1     1     1     1     0     0\n17 4863        1     1      0     0       0     0     0     0     0     0     0\n18 4864        1     1      0     0       0     0     0     0     0     0     0\n19 4865        1     1      1     0       0     0     0     0     0     0     0\n```\n:::\n:::\n\n\n#### 2) Aggregation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwarpbreaks |> \n  pivot_wider(\n    names_from = c(wool),\n    values_from = breaks,\n    values_fn = mean\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  tension     A     B\n  <fct>   <dbl> <dbl>\n1 L        44.6  28.2\n2 M        24    28.8\n3 H        24.6  18.8\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}