{
  "hash": "d2bd689eb08990b7f9a1bd9fbf209fd6",
  "result": {
    "markdown": "---\ntitle: \"dplyr 심화: across()\"\ndescription:  \"across()로 배우는 열 동시 처리\"\ndate: '2023-02-02'\ncategories: [dplyr, R]\n---\n\n\n데이터 분석을 수행할 때, 여러 열에 대해 동일한 작업을 해주는 경우가 종종 있습니다. 그러나 동일한 코드를 복사해서 붙여넣기 하는 것은 굉장히 번거로운 일이고, 때로는 실수의 원인이 되기도 합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nstorms |> \n  group_by(name, month) |> \n  summarise(mean_wind = mean(wind, na.rm=T),\n            mean_pressure = mean(pressure,na.rm=T),\n            mean_tropical = mean(tropicalstorm_force_diameter, na.rm=T),\n            mean_hurricane_force = mean(hurricane_force_diameter, na.rm=T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 396 × 6\n# Groups:   name [214]\n   name     month mean_wind mean_pressure mean_tropical mean_hurricane_force\n   <chr>    <dbl>     <dbl>         <dbl>         <dbl>                <dbl>\n 1 AL011993     5      25           1002.           NaN                  NaN\n 2 AL011993     6      28.3          999.           NaN                  NaN\n 3 AL012000     6      25           1009.           NaN                  NaN\n 4 AL021992     6      29           1007.           NaN                  NaN\n 5 AL021994     7      24.2         1016.           NaN                  NaN\n 6 AL021999     7      28.8         1005.           NaN                  NaN\n 7 AL022000     6      29.2         1009.           NaN                  NaN\n 8 AL022001     7      25           1011            NaN                  NaN\n 9 AL022003     6      30           1009.           NaN                  NaN\n10 AL022006     7      38           1002.            48                    0\n# … with 386 more rows\n```\n:::\n:::\n\n\n이번 글에서는 여러 개의 열에 대해 동일한 작업을 수행할 수 있는 `across()` 에 대해 살펴보도록 하겠습니다.\n\n`across()` 를 사용할 경우, 위의 코드는 다음과 같이 입력할 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstorms |> \n  group_by(name,month) |> \n  summarise(across(wind:hurricane_force_diameter, mean, na.rm=T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 396 × 6\n# Groups:   name [214]\n   name     month  wind pressure tropicalstorm_force_diameter hurricane_force_…¹\n   <chr>    <dbl> <dbl>    <dbl>                        <dbl>              <dbl>\n 1 AL011993     5  25      1002.                          NaN                NaN\n 2 AL011993     6  28.3     999.                          NaN                NaN\n 3 AL012000     6  25      1009.                          NaN                NaN\n 4 AL021992     6  29      1007.                          NaN                NaN\n 5 AL021994     7  24.2    1016.                          NaN                NaN\n 6 AL021999     7  28.8    1005.                          NaN                NaN\n 7 AL022000     6  29.2    1009.                          NaN                NaN\n 8 AL022001     7  25      1011                           NaN                NaN\n 9 AL022003     6  30      1009.                          NaN                NaN\n10 AL022006     7  38      1002.                           48                  0\n# … with 386 more rows, and abbreviated variable name ¹​hurricane_force_diameter\n```\n:::\n:::\n\n\n### 기본 사용법\n\n`across()` 에는 핵심적인 두 가지의 인자를 받을 수 있습니다.\n\n-   `.cols`: 함수를 적용시킬 열들을 입력합니다. 열의 위치, 이름, 유형을 통해 열들을 선택할 수 있습니다.\n\n-   `.fns`: 열들에 적용시킬 함수를 입력합니다. purrr 패키지 스타일의 식 `~.x/2`와 같은 형태로도 입력 가능합니다.\n\nacross()는 주로 summarise() 와 함께 사용해 여러 열에 동일한 함수를 적용시켜줍니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 열의 유형으로 선택하기\nstarwars |> \n  summarise(across(where(is.character), n_distinct))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 8\n   name hair_color skin_color eye_color   sex gender homeworld species\n  <int>      <int>      <int>     <int> <int>  <int>     <int>   <int>\n1    87         13         31        15     5      3        49      38\n```\n:::\n\n```{.r .cell-code}\n# 열의 이름으로 선택\nstarwars |> \n  group_by(species) |> \n  filter(n()>1) |> \n  summarise(across(c(sex,gender,homeworld), n_distinct))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n  species    sex gender homeworld\n  <chr>    <int>  <int>     <int>\n1 Droid        1      2         3\n2 Gungan       1      1         1\n3 Human        2      2        16\n4 Kaminoan     2      2         1\n5 Mirialan     1      1         1\n6 Twi'lek      2      2         1\n7 Wookiee      1      1         1\n8 Zabrak       1      1         2\n9 <NA>         1      1         3\n```\n:::\n\n```{.r .cell-code}\n# purrr 방식 함수 적용\nstarwars |> \n  group_by(species) |> \n  filter(n()>1) |> \n  summarise(across(is.numeric, ~mean(.x, na.rm=T)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n  species  height  mass birth_year\n  <chr>     <dbl> <dbl>      <dbl>\n1 Droid      131.  69.8       53.3\n2 Gungan     209.  74         52  \n3 Human      177.  82.8       53.4\n4 Kaminoan   221   88        NaN  \n5 Mirialan   168   53.1       49  \n6 Twi'lek    179   55         48  \n7 Wookiee    231  124        200  \n8 Zabrak     173   80         54  \n9 <NA>       181.  48         62  \n```\n:::\n:::\n\n\n### 여러 함수 적용하기\n\n`across()`를 이용해 여러 열에 두 가지 이상의 함수를 적용할 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_max <- list(\n  min = ~min(.x, na.rm=T),\n  max = ~max(.x ,na.rm=T)\n)\n\nstarwars |> \n  group_by(species) |> \n  summarise(across(is.numeric,min_max))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 38 × 7\n   species   height_min height_max mass_min mass_max birth_year_min birth_year…¹\n   <chr>          <int>      <int>    <dbl>    <dbl>          <dbl>        <dbl>\n 1 Aleena            79         79       15       15            Inf         -Inf\n 2 Besalisk         198        198      102      102            Inf         -Inf\n 3 Cerean           198        198       82       82             92           92\n 4 Chagrian         196        196      Inf     -Inf            Inf         -Inf\n 5 Clawdite         168        168       55       55            Inf         -Inf\n 6 Droid             96        200       32      140             15          112\n 7 Dug              112        112       40       40            Inf         -Inf\n 8 Ewok              88         88       20       20              8            8\n 9 Geonosian        183        183       80       80            Inf         -Inf\n10 Gungan           196        224       66       82             52           52\n# … with 28 more rows, and abbreviated variable name ¹​birth_year_max\n```\n:::\n:::\n\n\n여러 개의 함수를 적용한 경우, `.names` 를 통해 결과 데이터에서 출력되는 열의 이름을 변경합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |> \n  summarise(across(is.numeric, min_max, .names = \"{.fn}_{.col}\")) |> \n  relocate(starts_with('min'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 6\n  min_height min_mass min_birth_year max_height max_mass max_birth_year\n       <int>    <dbl>          <dbl>      <int>    <dbl>          <dbl>\n1         66       15              8        264     1358            896\n```\n:::\n:::\n\n\n### 다른 함수와의 활용\n\n#### 1. `mutate()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_max_scale <- function(x){\n  m <- min(x, na.rm=T)\n  M <- max(x, na.rm=T)\n  return((x-m)/(M-m))\n}\n\ndf <- tibble(x=1:4, y=rnorm(4))\ndf |> mutate(\n  across(is.numeric, min_max_scale)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n      x     y\n  <dbl> <dbl>\n1 0     0    \n2 0.333 0.433\n3 0.667 1    \n4 1     0.653\n```\n:::\n:::\n\n\n#### 2. `distinct()` , `count()`\n\n`count()`, `distinct()` 와 같은 함수는 summarise() 를 생략할 수 있습니다.\n\n`distinct()`: unique한 값 찾기\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |> distinct(across(contains('color')))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 67 × 3\n   hair_color    skin_color  eye_color\n   <chr>         <chr>       <chr>    \n 1 blond         fair        blue     \n 2 <NA>          gold        yellow   \n 3 <NA>          white, blue red      \n 4 none          white       yellow   \n 5 brown         light       brown    \n 6 brown, grey   light       blue     \n 7 brown         light       blue     \n 8 <NA>          white, red  red      \n 9 black         light       brown    \n10 auburn, white fair        blue-gray\n# … with 57 more rows\n```\n:::\n:::\n\n\n`count()`: 수를 셀 때 사용하는 함수입니다. `across()`와 함께 사용할 경우, 조건에 해당하는 열들의 조합별로 수를 셉니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |> count(across(contains('color')), sort = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 67 × 4\n   hair_color skin_color eye_color     n\n   <chr>      <chr>      <chr>     <int>\n 1 brown      light      brown         6\n 2 brown      fair       blue          4\n 3 none       grey       black         4\n 4 black      dark       brown         3\n 5 blond      fair       blue          3\n 6 black      fair       brown         2\n 7 black      tan        brown         2\n 8 black      yellow     blue          2\n 9 brown      fair       brown         2\n10 none       white      yellow        2\n# … with 57 more rows\n```\n:::\n:::\n\n\n#### filter()\n\nfilter()와 across()는 바로 사용할 수 없습니다.\n\n-   `if_any()` : 하나만 함수 부분에 해당되더라도 선택합니다.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    starwars |> \n      filter(if_any(everything(),~!is.na(.x)))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 87 × 14\n       name        height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender homew…⁵\n       <chr>        <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n     1 Luke Skywa…    172    77 blond   fair    blue       19   male  mascu… Tatooi…\n     2 C-3PO          167    75 <NA>    gold    yellow    112   none  mascu… Tatooi…\n     3 R2-D2           96    32 <NA>    white,… red        33   none  mascu… Naboo  \n     4 Darth Vader    202   136 none    white   yellow     41.9 male  mascu… Tatooi…\n     5 Leia Organa    150    49 brown   light   brown      19   fema… femin… Aldera…\n     6 Owen Lars      178   120 brown,… light   blue       52   male  mascu… Tatooi…\n     7 Beru White…    165    75 brown   light   blue       47   fema… femin… Tatooi…\n     8 R5-D4           97    32 <NA>    white,… red        NA   none  mascu… Tatooi…\n     9 Biggs Dark…    183    84 black   light   brown      24   male  mascu… Tatooi…\n    10 Obi-Wan Ke…    182    77 auburn… fair    blue-g…    57   male  mascu… Stewjon\n    # … with 77 more rows, 4 more variables: species <chr>, films <list>,\n    #   vehicles <list>, starships <list>, and abbreviated variable names\n    #   ¹​hair_color, ²​skin_color, ³​eye_color, ⁴​birth_year, ⁵​homeworld\n    ```\n    :::\n    :::\n\n\n-   `if_all()` : 열의 모든 값들이 함수 부분을 충족해야 선택합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |> \n  filter(if_all(everything(),~!is.na(.x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 29 × 14\n   name        height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender homew…⁵\n   <chr>        <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n 1 Luke Skywa…    172    77 blond   fair    blue       19   male  mascu… Tatooi…\n 2 Darth Vader    202   136 none    white   yellow     41.9 male  mascu… Tatooi…\n 3 Leia Organa    150    49 brown   light   brown      19   fema… femin… Aldera…\n 4 Owen Lars      178   120 brown,… light   blue       52   male  mascu… Tatooi…\n 5 Beru White…    165    75 brown   light   blue       47   fema… femin… Tatooi…\n 6 Biggs Dark…    183    84 black   light   brown      24   male  mascu… Tatooi…\n 7 Obi-Wan Ke…    182    77 auburn… fair    blue-g…    57   male  mascu… Stewjon\n 8 Anakin Sky…    188    84 blond   fair    blue       41.9 male  mascu… Tatooi…\n 9 Chewbacca      228   112 brown   unknown blue      200   male  mascu… Kashyy…\n10 Han Solo       180    80 brown   fair    brown      29   male  mascu… Corell…\n# … with 19 more rows, 4 more variables: species <chr>, films <list>,\n#   vehicles <list>, starships <list>, and abbreviated variable names\n#   ¹​hair_color, ²​skin_color, ³​eye_color, ⁴​birth_year, ⁵​homeworld\n```\n:::\n:::\n\n\n### `across()` vs `_if()`, `_at()`, `_all()`의 비교\n\n`_if()`, `_at()`, `_all()`은 dplyr 이전 버전에서 쓰이던 함수들로, `across()` 처럼 여러 열에 대해 동시에 작업을 하기 위해 사용하는 함수들입니다.\n\n`across()` 가 더 좋은 이유는 다음과 같습니다.\n\n1.  여러 열들에 대해 특정 함수를 사용하여 요약할 수 있습니다.\n2.  각 함수별로 `_if()`, `_at()`, `_all()` 이 존재했습니다. `across()`는 이런 함수들의 기능을 아우르기 때문에, 사용해야 할 함수의 숫자를 줄여줍니다.\n\nacross()와 `_if()`, `_at()`, `_all()` 을 대응시켜보면 다음과 같습니다. 만약 mutate()를 통해 column을 변화시키고자 할 경우,\n\n-   `_if()`\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    starwars |> mutate_if(is.numeric, mean, na.rm=T) \n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 87 × 14\n       name        height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender homew…⁵\n       <chr>        <dbl> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n     1 Luke Skywa…   174.  97.3 blond   fair    blue       87.6 male  mascu… Tatooi…\n     2 C-3PO         174.  97.3 <NA>    gold    yellow     87.6 none  mascu… Tatooi…\n     3 R2-D2         174.  97.3 <NA>    white,… red        87.6 none  mascu… Naboo  \n     4 Darth Vader   174.  97.3 none    white   yellow     87.6 male  mascu… Tatooi…\n     5 Leia Organa   174.  97.3 brown   light   brown      87.6 fema… femin… Aldera…\n     6 Owen Lars     174.  97.3 brown,… light   blue       87.6 male  mascu… Tatooi…\n     7 Beru White…   174.  97.3 brown   light   blue       87.6 fema… femin… Tatooi…\n     8 R5-D4         174.  97.3 <NA>    white,… red        87.6 none  mascu… Tatooi…\n     9 Biggs Dark…   174.  97.3 black   light   brown      87.6 male  mascu… Tatooi…\n    10 Obi-Wan Ke…   174.  97.3 auburn… fair    blue-g…    87.6 male  mascu… Stewjon\n    # … with 77 more rows, 4 more variables: species <chr>, films <list>,\n    #   vehicles <list>, starships <list>, and abbreviated variable names\n    #   ¹​hair_color, ²​skin_color, ³​eye_color, ⁴​birth_year, ⁵​homeworld\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    starwars |> mutate(across(is.numeric,mean, na.rm=T))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 87 × 14\n       name        height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender homew…⁵\n       <chr>        <dbl> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n     1 Luke Skywa…   174.  97.3 blond   fair    blue       87.6 male  mascu… Tatooi…\n     2 C-3PO         174.  97.3 <NA>    gold    yellow     87.6 none  mascu… Tatooi…\n     3 R2-D2         174.  97.3 <NA>    white,… red        87.6 none  mascu… Naboo  \n     4 Darth Vader   174.  97.3 none    white   yellow     87.6 male  mascu… Tatooi…\n     5 Leia Organa   174.  97.3 brown   light   brown      87.6 fema… femin… Aldera…\n     6 Owen Lars     174.  97.3 brown,… light   blue       87.6 male  mascu… Tatooi…\n     7 Beru White…   174.  97.3 brown   light   blue       87.6 fema… femin… Tatooi…\n     8 R5-D4         174.  97.3 <NA>    white,… red        87.6 none  mascu… Tatooi…\n     9 Biggs Dark…   174.  97.3 black   light   brown      87.6 male  mascu… Tatooi…\n    10 Obi-Wan Ke…   174.  97.3 auburn… fair    blue-g…    87.6 male  mascu… Stewjon\n    # … with 77 more rows, 4 more variables: species <chr>, films <list>,\n    #   vehicles <list>, starships <list>, and abbreviated variable names\n    #   ¹​hair_color, ²​skin_color, ³​eye_color, ⁴​birth_year, ⁵​homeworld\n    ```\n    :::\n    :::\n\n\n-   `_at()`\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    Mode <- function(x){\n      y <- names(which.max(table(x)))\n      return(y)\n    }\n    starwars |> \n      mutate_at(vars(ends_with('color')),Mode) |> \n      select(ends_with('color'))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 87 × 3\n       hair_color skin_color eye_color\n       <chr>      <chr>      <chr>    \n     1 none       fair       brown    \n     2 none       fair       brown    \n     3 none       fair       brown    \n     4 none       fair       brown    \n     5 none       fair       brown    \n     6 none       fair       brown    \n     7 none       fair       brown    \n     8 none       fair       brown    \n     9 none       fair       brown    \n    10 none       fair       brown    \n    # … with 77 more rows\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    starwars |> \n      mutate(across(ends_with('color'),Mode)) |> \n      select(ends_with('color'))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 87 × 3\n       hair_color skin_color eye_color\n       <chr>      <chr>      <chr>    \n     1 none       fair       brown    \n     2 none       fair       brown    \n     3 none       fair       brown    \n     4 none       fair       brown    \n     5 none       fair       brown    \n     6 none       fair       brown    \n     7 none       fair       brown    \n     8 none       fair       brown    \n     9 none       fair       brown    \n    10 none       fair       brown    \n    # … with 77 more rows\n    ```\n    :::\n    :::\n\n\n-   `_all()`\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- tibble(x=2, y=4, z=8)\n    df |> mutate_all(~.x/y)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 1 × 3\n          x     y     z\n      <dbl> <dbl> <dbl>\n    1   0.5     1     8\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    df |> mutate(across(everything(),~.x/y))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 1 × 3\n          x     y     z\n      <dbl> <dbl> <dbl>\n    1   0.5     1     2\n    ```\n    :::\n    :::\n\n\n    `_all()` 함수는 `across()` 안에 `everything()`을 사용하여 구현이 가능합니다.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}