{
  "hash": "d7f95e83cf106321ae0e00bfae11120b",
  "result": {
    "markdown": "---\ntitle: \"R `mlr3` w/ ChatGPT\"\nsubtitle: \"feat. `mlr3`\"\nauthor: Yeonhoon Jang\nformat: \n  revealjs:\n    transition: fade\n    auto-stretch: false\n    df-print: tibble\n    code-overflow: wrap\n    code-copy: false\n    highlight-style: tango\n    fig-cap-location: bottom\n    scrollable: true\n    css: style.css\n---\n\n\n\n\n\n## Contents\n\n-   Introduction\n-   Design & Syntax\n-   Basic modeling\n-   Resampling\n-   Benchmarking\n-   ML pipeline\n\n# Introduction\n\n## Who am I?\n\n- Graduate School of Public Health, SNU\n- Seoul National University Bundang Hospital\n- Data (NHIS, MIMIC-IV, CDW, Registry data, KNHNAES ...)\n\n## ML in R\n\n:::{layout=\"[50,50]\"}\n\n\n![](https://tidymodels.tidymodels.org/logo.png){.fragment width=300px  fig-align=center}\n\n\n![](https://github.com/mlr-org/mlr3/raw/main/man/figures/logo.png){.fragment width=400px fig-align=center}\n\n:::\n\n## What is `mlr3`?\n\n`mlr3`: **M**achine **L**earning in **R 3**\n\n![](mlr31.png){fig-align=center}\n\n\n## `mlr3` & `mlr3verse`\n\n![source: https://mlr3.mlr-org.com](https://mlr3.mlr-org.com/reference/figures/mlr3verse.svg){width=\"800\" fig-align=center}\n\n## Why choose `mlr3`?\n\n::: {.incremental}\n\n- National Health Insurance System Data (NHIS-HEALS, NHIS-NSC)\n\n- `dplyr` $\\rightarrow$ `data.table` \n\n- `Python` : `scikit-learn` = `R` : `??`\n\n- `mlr3`: `data.table` based package\n\n:::\n\n# Design & Syntax\n\n## `mlr3` vs `tidymodels`\n\n\n![](mlr3_tidy_design.png)\n\n![](mlr3_tidy_syntax.png)\n\n::: {.notes}\ntidy: tidyverse와 같은 tidy syntax 기반, 배우기 쉬운, 누구나 쉽게 사용할 수 있는\nMLR3: OOP, performance, task, learner,  resampling\n\n:::\n\n## Core 1. `R6` {.smaller}\n\nObject Oriented Programming (OOP) \n\n-   Objects: `foo = bar$new()`\n-   Methods: `$new()`\n-   Fields: `$baz`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntask = TaskClassif$new(\"xxx\") # Objects\ntask$new()  # Methods\ntask$feature_names # Fields\n```\n:::\n\n<br>\n\n## Core 2. `data.table` {.smaller}\n\n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*j7b4pMCV2ucLbMGGNJC08Q.png){width=500px fig-align=center}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDT[i >= 10] # filter rows\nDT[, .(X,Y)] # select columns\nDT[, mean(X), by=Y] # aggregate by group\n```\n:::\n\n\n\n## Utils 1. Dictionary{auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Getting a specific object with `$get(key)`\nmlr_learners$get(\"regr.rpart\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<LearnerRegrRpart:regr.rpart>: Regression Tree\n* Model: -\n* Parameters: xval=0\n* Packages: mlr3, rpart\n* Predict Types:  [response]\n* Feature Types: logical, integer, numeric, factor, ordered\n* Properties: importance, missings, selected_features, weights\n```\n:::\n:::\n\n\n## Utils 1. Dictionary{auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Searching objects with $keys()\nmlr_measures$keys() |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"aic\"            \"bic\"            \"classif.acc\"    \"classif.auc\"   \n[5] \"classif.bacc\"   \"classif.bbrier\"\n```\n:::\n:::\n\n\n## Utils 1. Dictionary{auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# OR with `as.data.table()`\nas.data.table(mlr_learners) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  key            label task_type feature_types packages properties predict_types\n  <chr>          <chr> <chr>     <list>        <list>   <list>     <list>       \n1 classif.cv_gl… <NA>  classif   <chr [3]>     <chr>    <chr [4]>  <chr [2]>    \n2 classif.debug  Debu… classif   <chr [6]>     <chr>    <chr [4]>  <chr [2]>    \n3 classif.featu… Feat… classif   <chr [7]>     <chr>    <chr [6]>  <chr [2]>    \n4 classif.glmnet <NA>  classif   <chr [3]>     <chr>    <chr [3]>  <chr [2]>    \n5 classif.kknn   <NA>  classif   <chr [5]>     <chr>    <chr [2]>  <chr [2]>    \n6 classif.lda    <NA>  classif   <chr [5]>     <chr>    <chr [3]>  <chr [2]>    \n```\n:::\n:::\n\n\n\n## Utils 2. Sugar functions\n\n- `R6` class $\\rightarrow$ `S3` type functions\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1-2|4-5\"}\n# No sugar\nLearnerClassifLogReg$new()\n\n# Sugar\nlrn(\"classif.log_reg\")\n```\n:::\n\n\n## Utils 3. `mlr3viz`\n\n-   `ggplot2`, `autoplot()` visualization\n\n\n::: {.cell}\n\n:::\n\n::: {.cell layout=\"[[50,50]]\" layout-align=\"center\"}\n\n```{.r .cell-code}\nautoplot(pred)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=960}\n:::\n\n```{.r .cell-code}\nautoplot(pred, type=\"roc\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-8-2.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n# Basic modeling\n\n## Ask ChatGPT!\n\n:::{layout=\"[[100],[50,50]]\"}\n\n![](mlr3_tidy_titanic_basic_modeling.png){width=100%}\n\n\n![](mlr3_tidy_basic_mlr3.png)\n\n![](mlr3_tidy_basic_tidymodels.png)\n\n\n:::\n\n## 1. Tasks\n\n::: {.incremental}\n-   Objects with data and metadata \n-   Default datasets\n-   Dictionary: `mlr_tasks`\n-   Sugar function: `tsk()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pre-defined tasks\ntsk(\"titanic\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<TaskClassif:titanic> (1309 x 11): Titanic\n* Target: survived\n* Properties: twoclass\n* Features (10):\n  - chr (3): cabin, name, ticket\n  - dbl (2): age, fare\n  - fct (2): embarked, sex\n  - int (2): parch, sib_sp\n  - ord (1): pclass\n```\n:::\n:::\n\n\n:::\n\n## 1. Tasks\n\nOr External data as `task`\n\n-   `as_task_regr()` : regression\n-   `as_task_classif()`: classification\n-   `as_task_clust()`: clustering\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntask_mtcars = as_task_regr(mtcars,\n                           target = \"mpg\")\ntask_mtcars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<TaskRegr:mtcars> (32 x 11)\n* Target: mpg\n* Properties: -\n* Features (10):\n  - dbl (10): am, carb, cyl, disp, drat, gear, hp, qsec, vs, wt\n```\n:::\n:::\n\n\n\n\n## 2. Learners\n\n![](mlr3_learners.png){width=100%}\n\n## 2. Learners {.smaller}\n\n::: {.incremental}\n\n-   ML algorithms\n-   Dictionary: `mlr_learners`\n-   Sugar function: `lrn()`\n-   regression (`regr.~`), classification(`classif.~`), and clustering (`clust.~`)\n-   `library(mlr3learners)` + `library(mlr3extralearners)`\n\n<br>\n:::\n\n## 2. Learners {.smaller}\n\n-   `$train()`, `$predict()`\n\n[![source: mlr3books](https://mlr3book.mlr-org.com/Figures/learner.svg){fig-align=\"center\"}](https://mlr3book.mlr-org.com/basics.html)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|3-4|6|7\"}\ntask = tsk(\"german_credit\")\n\nlearner_dt = lrn(\"classif.rpart\", predict_type=\"prob\")\nsplit = partition(task, ratio=.3)\n\nlearner_dt$train(task, row_ids = split$train)\nprediction = learner_dt$predict(task, row_ids = split$test)\n```\n:::\n\n\n## 2. Learners{auto-animate=\"true\"}\n\nconfusion matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprediction$confusion\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        truth\nresponse good bad\n    good  422 137\n    bad    68  73\n```\n:::\n:::\n\n\n## 2. Learners{auto-animate=\"true\"}\n\nconfusion matrix as a bar plot\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nautoplot(prediction)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=384}\n:::\n:::\n\n\n## Hyperparameter\n\n- hyperparameter setting\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3\"}\nlearner = lrn(\"classif.rpart\", maxdepth = 1)\nlearner$param_set$set_values(xval = 2, maxdepth=3, cp=.5)\nlearner$param_set$values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$xval\n[1] 2\n\n$maxdepth\n[1] 3\n\n$cp\n[1] 0.5\n```\n:::\n:::\n\n\n## Hyperparameter\n\n- `$param_set` of learners\n- setting class, lower, upper\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.table(learner$param_set) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 11\n  id         class lower upper levels nlevels is_bounded special_vals default   \n  <chr>      <chr> <dbl> <dbl> <list>   <dbl> <lgl>      <list>       <list>    \n1 cp         Para…     0     1 <NULL>     Inf TRUE       <list [0]>   <dbl [1]> \n2 keep_model Para…    NA    NA <lgl>        2 TRUE       <list [0]>   <lgl [1]> \n3 maxcompete Para…     0   Inf <NULL>     Inf FALSE      <list [0]>   <int [1]> \n4 maxdepth   Para…     1    30 <NULL>      30 TRUE       <list [0]>   <int [1]> \n5 maxsurrog… Para…     0   Inf <NULL>     Inf FALSE      <list [0]>   <int [1]> \n6 minbucket  Para…     1   Inf <NULL>     Inf FALSE      <list [0]>   <NoDefalt>\n# ℹ 2 more variables: storage_type <chr>, tags <list>\n```\n:::\n:::\n\n<br>\n\n| Parameter class | Description                 |\n|:---------------:|-----------------------------|\n| `ParamDbl`        | Numeric parameters          |\n| `ParamInt`        | Integer parameters          |\n| `ParamFct`        | Categorical parameters      |\n| `ParamLgl`        | Logical / Boolean paramters |\n<br>\n\n\n## Measures \n\n:::{.incremental}\n\n-   Evaluation of performances \n-   Dictionary: `mlr_measures` \n-   Sugar function: `msr()`, `msrs()`\n-   `classif.~`, `regr.~`\n-   `$score()`\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  key            label           task_type packages predict_type task_properties\n  <chr>          <chr>           <chr>     <list>   <chr>        <list>         \n1 aic            Akaike Informa… <NA>      <chr>    <NA>         <chr [0]>      \n2 bic            Bayesian Infor… <NA>      <chr>    <NA>         <chr [0]>      \n3 classif.acc    Classification… classif   <chr>    response     <chr [0]>      \n4 classif.auc    Area Under the… classif   <chr>    prob         <chr [1]>      \n5 classif.bacc   Balanced Accur… classif   <chr>    response     <chr [0]>      \n6 classif.bbrier Binary Brier S… classif   <chr>    prob         <chr [1]>      \n```\n:::\n:::\n\n<br>\n\n:::\n\n## Measures\n\n`msr()`: a single performance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeasure = msr(\"classif.acc\")\nprediction$score(measure)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclassif.acc \n  0.7071429 \n```\n:::\n:::\n\n<br>\n\n`msrs()`: multiple performances\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Multiple measurements\nmeasures = msrs(c(\"classif.acc\",\"classif.ppv\",\"classif.npv\",\"classif.auc\"))\nprediction$score(measures)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclassif.acc classif.ppv classif.npv classif.auc \n  0.7071429   0.7549195   0.5177305   0.6930175 \n```\n:::\n:::\n\n\n\n# Resampling\n\n\n## Resampling\n\n![](https://mlr3book.mlr-org.com/Figures/ml_abstraction-2.svg){fig-align=center}\n\n-   Split available data into multiple training and test sets for generalization \n\n## `mlr3` vs `tidymodels`\n\n:::{layout=\"[[100],[50,50]]\"}\n\n![](mlr3_tidy_cv_ask.png)\n\n![](mlr3_tidy_cv_mlr3.png)\n\n![](mlr3_tidy_cv_tidymodels.png)\n\n\n:::\n\n## Resampling\n\n-   Dictionary: `mlr_resamplings`\n-   Sugar function: `rsmp()`\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n  key         label                         params    iters\n  <chr>       <chr>                         <list>    <int>\n1 bootstrap   Bootstrap                     <chr [2]>    30\n2 custom      Custom Splits                 <chr [0]>    NA\n3 custom_cv   Custom Split Cross-Validation <chr [0]>    NA\n4 cv          Cross-Validation              <chr [1]>    10\n5 holdout     Holdout                       <chr [1]>     1\n6 insample    Insample Resampling           <chr [0]>     1\n7 loo         Leave-One-Out                 <chr [0]>    NA\n8 repeated_cv Repeated Cross-Validation     <chr [2]>   100\n9 subsampling Subsampling                   <chr [2]>    30\n```\n:::\n:::\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresample = rsmp(\"cv\", folds=10)\n```\n:::\n\n\n## Resampling\n\n- `resample()`: initiate resampling\n- `$aggregate()`: aggregate resampling performance\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3|4|5|6\"}\ntask = tsk(\"german_credit\")\nlearner = lrn(\"classif.ranger\", predict_type=\"prob\")\nresample = rsmp(\"cv\", folds=10)\nrr  = resample(task, learner, resample, store_model=T)\nmeasures = msrs(c(\"classif.acc\",\"classif.ppv\",\"classif.npv\",\"classif.auc\"))\nrr$aggregate(measures)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclassif.acc classif.ppv classif.npv classif.auc \n  0.7610000   0.7818277   0.6598222   0.7952059 \n```\n:::\n:::\n\n\n## Resampling\n\nplotting resampling results\n\n\n::: {.cell layout=\"[[50,50]]\"}\n\n```{.r .cell-code}\nautoplot(rr, type=\"boxplot\", measure = msr(\"classif.acc\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n\n```{.r .cell-code}\nautoplot(rr, type=\"histogram\", measure = msr(\"classif.acc\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-22-2.png){width=960}\n:::\n:::\n\n\n# Comparing performaces\n\n## `mlr3` vs `tidymodels`\n\n:::{layout=\"[[100],[50,50]]\"}\n\n![](mlr3_tidy_benchmark_ask.png)\n\n![](mlr3_tidy_benchmark_mlr3.png)\n\n![](mlr3_tidy_benchmark_tidymodels.png)\n\n:::\n\n## Benchmarking\n\n- Comparison of multiple learners on a single task (or multiple tasks).\n- `benchmark_grid()`: design a benchmarking \n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1|3-6|9|11\"}\ntasks = tsks(c(\"german_credit\", \"sonar\", \"breast_cancer\"))\n\nlearners = list(\n  lrn(\"classif.log_reg\", predict_type=\"prob\", id=\"LR\"),\n  lrn(\"classif.rpart\", predict_type=\"prob\", id=\"DT\"),\n  lrn(\"classif.ranger\", predict_type=\"prob\", id=\"RF\")\n)\n\nrsmp = rsmp(\"cv\", folds=5)\n\ndesign = benchmark_grid(tasks, learners, rsmp)\n```\n:::\n\n\n\n## Benchmarking\n\n- `benchmark()`: execute benchmarking\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr = benchmark(design)\nmeasures = msrs(c(\"classif.acc\",\"classif.ppv\", \"classif.npv\", \"classif.auc\"))\nas.data.table(bmr$aggregate(measures))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 10\n     nr resample_result task_id       learner_id resampling_id iters classif.acc\n  <int> <list>          <chr>         <chr>      <chr>         <int>       <dbl>\n1     1 <RsmplRsl>      german_credit LR         cv                5       0.746\n2     2 <RsmplRsl>      german_credit DT         cv                5       0.736\n3     3 <RsmplRsl>      german_credit RF         cv                5       0.759\n4     4 <RsmplRsl>      sonar         LR         cv                5       0.736\n5     5 <RsmplRsl>      sonar         DT         cv                5       0.702\n6     6 <RsmplRsl>      sonar         RF         cv                5       0.831\n7     7 <RsmplRsl>      breast_cancer LR         cv                5       0.917\n8     8 <RsmplRsl>      breast_cancer DT         cv                5       0.940\n9     9 <RsmplRsl>      breast_cancer RF         cv                5       0.969\n# ℹ 3 more variables: classif.ppv <dbl>, classif.npv <dbl>, classif.auc <dbl>\n```\n:::\n:::\n\n<br>\n\n## Benchmarking result\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|1|2-6|7|8|9|10\"}\ntask = tsk(\"german_credit\")\nlearners = list(\n  lrn(\"classif.log_reg\", predict_type=\"prob\", id = \"LR\"),\n  lrn(\"classif.rpart\", predict_type=\"prob\", id = \"DT\"),\n  lrn(\"classif.ranger\", predict_type=\"prob\", id = \"RF\")\n)\ncv10 = rsmp(\"cv\", folds=10)\ndesign = benchmark_grid(task, learners, cv10)\nbmr = benchmark(design)\nautoplot(bmr, measure =msr(\"classif.auc\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-25-1.png){fig-align='center' width=384}\n:::\n:::\n\n\n## Benchmarking result\n\n\n::: {.cell layout=\"[[50,50]]\" layout-align=\"center\"}\n\n```{.r .cell-code}\nautoplot(bmr, type = \"roc\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-26-1.png){fig-align='center' width=480}\n:::\n\n```{.r .cell-code}\nautoplot(bmr, type = \"prc\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-26-2.png){fig-align='center' width=480}\n:::\n:::\n\n\n# Pipeline operatros\n\n## Pipe operator \n\n- Preprocessing with graph construction\n- Dictionary: `mlr_pipeops`\n- Sugar function: `po()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mlr3pipelines)\ntask = tsk(\"breast_cancer\")\n\ntask\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<TaskClassif:breast_cancer> (683 x 10): Wisconsin Breast Cancer\n* Target: class\n* Properties: twoclass\n* Features (9):\n  - ord (9): bare_nuclei, bl_cromatin, cell_shape, cell_size,\n    cl_thickness, epith_c_size, marg_adhesion, mitoses, normal_nucleoli\n```\n:::\n\n```{.r .cell-code}\ngr = po(\"scale\") %>>% \n  po(\"encode\") %>>% \n  po(\"imputemedian\") %>>% \n  lrn(\"classif.rpart\", predict_type=\"prob\")\n\ngr$plot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-27-1.png){width=960}\n:::\n:::\n\n\nOr manually ...\n\n::: {.cell}\n\n```{.r .cell-code}\ngr = Graph$new()\ngr$add_pipeop(po(\"pca\"))\ngr$add_pipeop(lrn(\"classif.ranger\"))\ngr$add_edge(\"pca\",\"classif.ranger\")\ngr$plot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-28-1.png){width=960}\n:::\n\n```{.r .cell-code}\ngrl =GraphLearner$new(gr)\n\n\ngrl$graph$pipeops$pca\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPipeOp: <pca> (not trained)\nvalues: <list()>\nInput channels <name [train type, predict type]>:\n  input [Task,Task]\nOutput channels <name [train type, predict type]>:\n  output [Task,Task]\n```\n:::\n:::\n\n\n## Popular POs\n\n| Class           | Key          |         Description            |\n|:---------------:|-------------|---------------------------------|\n|PipeOpScale      | \"scale\"     | Scale  features (µ=0, ∂=1)|\n|PipeOpScaleRange | \"scalerange\"| Scale features (min=0,Max=1)|\n|PipeOpPCA        | \"pca\"       | Principal component analysis |\n|PipeOpImputeMean | \"imputemean\"| Impute NAs with mean |\n|PipeOpImputeMedian | \"imputemedian\"| Impute NAs with median |\n|PipeOpEncode     |  \"encode\"    | Encode factor features |\n|PipeOpClassBalancing | \"classbalancing\" | Balance imbalanced data|\n\n\n\n## Setting hyperparameter for pipeops\n\n\n::: {.cell}\n\n```{.r .cell-code}\nenc = po(\"encode\", param_vals = list(method=\"one-hot\"))\n```\n:::\n\n\n\n## Resampling with graphs\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngr = po(\"scale\") %>>% \n  po(\"encode\") %>>% \n  po(\"imputemedian\") %>>% \n  lrn(\"classif.rpart\", predict_type=\"prob\")\nrr = resample(task, gr, rsmp(\"cv\",folds=3))\nautoplot(rr, type=\"roc\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-30-1.png){width=960}\n:::\n:::\n\n\n## And so on\n\n::: {.incremental}\n\n- Hyperparameter tuning\n- Feature selection\n\n:::\n\n\n## Summary\n\n::: {.incremental}\n\n`mlr3`\n\n- `R6`, `data.table` based ML framework\n- Still in development\n- A great textbook: [**mlr3book**](https://mlr3book.mlr-org.com)\n\n::: \n\n# Thank you! {align=\"center\"}",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}