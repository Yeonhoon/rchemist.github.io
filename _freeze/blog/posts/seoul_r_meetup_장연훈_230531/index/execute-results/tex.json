{
  "hash": "d95676a8ba48b46d8c0856925d6d046e",
  "result": {
    "markdown": "---\ntitle: \"R `mlr3` w/ ChatGPT\"\nsubtitle: \"feat. `mlr3`\"\nauthor: Yeonhoon Jang\nformat: \n  pdf:\n    transition: fade\n    auto-stretch: false\n    df-print: kable\n    code-overflow: wrap\n    code-copy: false\n    highlight-style: github\n    fig-cap-location: bottom\n    scrollable: true\n    slide-number: true\n    css: style.css\n---\n\n\n\n\n## Contents\n\n-   Introduction\n-   Syntax\n-   Basic modeling\n-   Resampling\n-   Benchmarking\n\n# Introduction\n\n## Who am I?\n\n-   Graduate School of Public Health, SNU (2019.03 ~ 2021.02)\n-   Seoul National University Bundang Hospital (2021.06 ~ )\n-   Data (NHIS, MIMIC-IV, Registry data, KNHNAES ...)\n-   Comento mentor (R for healthcare) (2022.07 ~ )\n\n## ML framework in R\n\n::: {layout=\"[50,50]\"}\n![](https://tidymodels.tidymodels.org/logo.png){.fragment width=\"300px\" fig-align=\"center\"}\n\n![](https://github.com/mlr-org/mlr3/raw/main/man/figures/logo.png){.fragment width=\"400px\" fig-align=\"center\"}\n:::\n\n## What is `mlr3`?\n\n`mlr3`: **M**achine **L**earning in **R 3**\n\n![](mlr31.png){fig-align=\"center\"}\n\n## `mlr3` & `mlr3verse`\n\n![source: https://mlr3.mlr-org.com](mlr3_mlr3verse.png){width=\"800\" fig-align=\"center\"}\n\n## Why `mlr3`? {.smaller}\n\n::: incremental\n\n-   National Health Insurance System Data (NHIS-HEALS, NHIS-NSC)\n\n-   `dplyr` $\\rightarrow$ `data.table`\n\n-   `Python` : `scikit-learn` = `R` : `??`\n\n-   `mlr3`: `data.table` based package\n:::\n\n# Syntax\n\n## `mlr3` vs `tidymodels`\n\n![](mlr3_tidy_syntax.png)\n\n## Core 1. `R6` {.smaller}\n\nObject Oriented Programming (OOP)\n\n-   Objects: `foo = bar$new()`\n-   Methods: `$new()`\n-   Fields: `$baz`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntask = TaskClassif$new(\"xxx\") # Objects\ntask$new()  # Methods\ntask$feature_names # Fields\n```\n:::\n\n\n<br>\n\n## Core 2. `data.table` {.smaller}\n\n![](mlr3_datatable.png){width=\"500px\" fig-align=\"center\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDT[i >= 10] # filter rows\nDT[, .(X,Y)] # select columns\nDT[, mean(X), by=Y] # aggregate by group\n```\n:::\n\n\n## Utils 1. Dictionary {auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Getting a specific object with `$get(key)`\nmlr_learners$get(\"regr.rpart\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<LearnerRegrRpart:regr.rpart>: Regression Tree\n* Model: -\n* Parameters: xval=0\n* Packages: mlr3, rpart\n* Predict Types:  [response]\n* Feature Types: logical, integer, numeric, factor, ordered\n* Properties: importance, missings, selected_features, weights\n```\n:::\n:::\n\n\n## Utils 1. Dictionary {auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Searching objects with $keys()\nmlr_measures$keys() |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"aic\"            \"bic\"            \"classif.acc\"    \"classif.auc\"   \n[5] \"classif.bacc\"   \"classif.bbrier\"\n```\n:::\n:::\n\n\n## Utils 1. Dictionary {auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# OR with `as.data.table()`\nas.data.table(mlr_learners) |> head()\n```\n\n::: {.cell-output-display}\n|key                 |label                              |task_type |feature_types                                                             |packages                           |properties                                                                                              |predict_types  |\n|:-------------------|:----------------------------------|:---------|:-------------------------------------------------------------------------|:----------------------------------|:-------------------------------------------------------------------------------------------------------|:--------------|\n|classif.cv_glmnet   |NA                                 |classif   |logical, integer, numeric                                                 |mlr3        , mlr3learners, glmnet |multiclass       , selected_features, twoclass         , weights                                        |response, prob |\n|classif.debug       |Debug Learner for Classification   |classif   |logical  , integer  , numeric  , character, factor   , ordered            |mlr3                               |hotstart_forward, missings        , multiclass      , twoclass                                          |response, prob |\n|classif.featureless |Featureless Classification Learner |classif   |logical  , integer  , numeric  , character, factor   , ordered  , POSIXct |mlr3                               |featureless      , importance       , missings         , multiclass       , selected_features, twoclass |response, prob |\n|classif.glmnet      |NA                                 |classif   |logical, integer, numeric                                                 |mlr3        , mlr3learners, glmnet |multiclass, twoclass  , weights                                                                         |response, prob |\n|classif.kknn        |NA                                 |classif   |logical, integer, numeric, factor , ordered                               |mlr3        , mlr3learners, kknn   |multiclass, twoclass                                                                                    |response, prob |\n|classif.lda         |NA                                 |classif   |logical, integer, numeric, factor , ordered                               |mlr3        , mlr3learners, MASS   |multiclass, twoclass  , weights                                                                         |response, prob |\n:::\n:::\n\n\n## Utils 2. Sugar functions\n\n-   `R6` class $\\rightarrow$ `S3` type functions\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1-2|4-5\"}\n# No sugar\nLearnerClassifLogReg$new()\n\n# Sugar\nlrn(\"classif.log_reg\")\n```\n:::\n\n\n## Utils 3. `mlr3viz` {.smaller}\n\n-   `autoplot()` visualization\n\n\n::: {.cell}\n\n:::\n\n::: {.cell layout=\"[[50,50]]\" layout-align=\"center\"}\n\n```{.r .cell-code}\nautoplot(pred)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-align='center'}\n:::\n\n```{.r .cell-code}\nautoplot(pred, type=\"roc\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-8-2.pdf){fig-align='center'}\n:::\n:::\n\n\n# Basic modeling\n\n## Ask ChatGPT!\n\n::: {layout=\"[[100],[50,50]]\"}\n![](mlr3_tidy_titanic_basic_ask.png){width=\"100%\"}\n\n![](mlr3_tidy_basic_tidymodels.png){width=\"100%\"}\n\n![](mlr3_tidy_basic_mlr3.png){width=\"100%\"}\n\n:::\n\n## 1. Tasks {.smaller}\n\n::: {.incremental}\n\n-   Objects with data and metadata\n-   Default datasets\n-   Dictionary: `mlr_tasks`\n-   Sugar function: `tsk()`\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R6 methods\n# mlr_tasks$get(\"titanic\")\n\n# Sugar function\ntsk(\"titanic\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<TaskClassif:titanic> (1309 x 11): Titanic\n* Target: survived\n* Properties: twoclass\n* Features (10):\n  - chr (3): cabin, name, ticket\n  - dbl (2): age, fare\n  - fct (2): embarked, sex\n  - int (2): parch, sib_sp\n  - ord (1): pclass\n```\n:::\n:::\n\n\n:::\n\n## 1. Tasks {.smaller}\n\nOr External data as `task`\n\n-   `as_task_regr()` : regression\n-   `as_task_classif()`: classification\n-   `as_task_clust()`: clustering\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntask_mtcars = as_task_regr(mtcars,\n                           target = \"mpg\")\ntask_mtcars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<TaskRegr:mtcars> (32 x 11)\n* Target: mpg\n* Properties: -\n* Features (10):\n  - dbl (10): am, carb, cyl, disp, drat, gear, hp, qsec, vs, wt\n```\n:::\n:::\n\n\n## 2. Learners {.smaller}\n\n::: incremental\n-   ML algorithms\n-   Dictionary: `mlr_learners`\n-   Sugar function: `lrn()`\n-   regression (`regr.~`), classification(`classif.~`), and clustering (`clust.~`)\n-   `library(mlr3learners)`\n<br>\n:::\n\n::: {.fragment}\n\n::: {.callout-note}\n## Extra learners\n- only for `github` not CRAN\n- e.g., `lightGBM`\n\n::: {.cell}\n\n```{.r .cell-code}\n# remotes::install_github(\"mlr-org/mlr3extralearners@*release\")\nlibrary(mlr3extralearners)\n```\n:::\n\n:::\n\n:::\n\n## 2. Learners {.smaller}\n\n-   `$train()`, `$predict()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3|4|5\"}\ntask = tsk(\"german_credit\")\nlearner_dt = lrn(\"classif.rpart\", predict_type=\"prob\")\nsplit = partition(task, ratio=.7)\nlearner_dt$train(task, row_ids = split$train)\nprediction = learner_dt$predict(task, row_ids = split$test)\n```\n:::\n\n\n![source: mlr3books](mlr3_learner_train_test.png){fig-align=\"center\" width=\"30%\"}\n\n\n## 2. Learners {auto-animate=\"true\"}\n\nconfusion matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprediction$confusion\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        truth\nresponse good bad\n    good  184  45\n    bad    26  45\n```\n:::\n:::\n\n\n## 2. Learners {auto-animate=\"true\"}\n\nOr with `mlr3viz`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nautoplot(prediction)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-14-1.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n## Hyperparameter {.smaller auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|5|7\"}\n# with learner\nlearner = lrn(\"classif.rpart\", maxdepth = 1)\n\n# Or\nlearner$param_set$set_values(xval = 2, maxdepth=3, cp=.5)\n\nlearner$param_set$values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$xval\n[1] 2\n\n$maxdepth\n[1] 3\n\n$cp\n[1] 0.5\n```\n:::\n:::\n\n\n## Hyperparameter {.smaller auto-animate=\"true\"}\n\n:::{.callout-note .smaller}\n## Setting hyperparameters\n-   `$param_set` of learners\n-   setting class, lower, upper\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.table(learner$param_set) |> head()\n```\n\n::: {.cell-output-display}\n|id           |class    | lower| upper|levels      | nlevels|is_bounded |special_vals |default                    |storage_type |tags  |\n|:------------|:--------|-----:|-----:|:-----------|-------:|:----------|:------------|:--------------------------|:------------|:-----|\n|cp           |ParamDbl |     0|     1|NULL        |     Inf|TRUE       |NULL         |0.01                       |numeric      |train |\n|keep_model   |ParamLgl |    NA|    NA|TRUE, FALSE |       2|TRUE       |NULL         |FALSE                      |logical      |train |\n|maxcompete   |ParamInt |     0|   Inf|NULL        |     Inf|FALSE      |NULL         |4                          |integer      |train |\n|maxdepth     |ParamInt |     1|    30|NULL        |      30|TRUE       |NULL         |30                         |integer      |train |\n|maxsurrogate |ParamInt |     0|   Inf|NULL        |     Inf|FALSE      |NULL         |5                          |integer      |train |\n|minbucket    |ParamInt |     1|   Inf|NULL        |     Inf|FALSE      |NULL         |<environment: 0x134ede100> |integer      |train |\n:::\n:::\n\n\n\n:::\n\n## 3. Measures {.smaller}\n\n::: incremental\n-   Evaluation of performances\n-   Dictionary: `mlr_measures`\n-   Sugar function: `msr()`, `msrs()`\n-   `classif.~`, `regr.~`\n-   `$score()`\n<br>\n\n::: {.fragment}\n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.table(mlr_measures) |> head()\n```\n\n::: {.cell-output-display}\n|key            |label                          |task_type |packages                   |predict_type |task_properties |\n|:--------------|:------------------------------|:---------|:--------------------------|:------------|:---------------|\n|aic            |Akaike Information Criterion   |NA        |mlr3                       |NA           |                |\n|bic            |Bayesian Information Criterion |NA        |mlr3                       |NA           |                |\n|classif.acc    |Classification Accuracy        |classif   |mlr3        , mlr3measures |response     |                |\n|classif.auc    |Area Under the ROC Curve       |classif   |mlr3        , mlr3measures |prob         |twoclass        |\n|classif.bacc   |Balanced Accuracy              |classif   |mlr3        , mlr3measures |response     |                |\n|classif.bbrier |Binary Brier Score             |classif   |mlr3        , mlr3measures |prob         |twoclass        |\n:::\n:::\n\n:::\n\n:::\n\n## 3. Measures {.smaller auto-animate=\"true\"}\n\n`msr()`: a single performance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeasure = msr(\"classif.acc\")\nprediction$score(measure)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclassif.acc \n  0.7633333 \n```\n:::\n:::\n\n\n<br>\n\n## 3. Measures {.smllaer auto-animate=\"true\"}\n\n`msrs()`: multiple performances\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Multiple measurements\nmeasures = msrs(c(\"classif.acc\",\"classif.ppv\",\"classif.npv\",\"classif.auc\"))\nprediction$score(measures)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclassif.acc classif.ppv classif.npv classif.auc \n  0.7633333   0.8034934   0.6338028   0.7558730 \n```\n:::\n:::\n\n\n# Resampling\n\n## Resampling {.smaller}\n\n::: {layout=\"[50,50]\"}\n![](mlr3_resampling.png){fig-align=\"center\" width=\"70%\"}\n\n![](mlr3_resampling2.png){fig-align=\"center\" width=\"70%\"}\n\n:::\n\n::: {.incremental}\n-   Split available data into multiple training and test sets \n-   **Reliable** performance\n-   Prevent **Overfitting**\n:::\n\n## `tidymodels` vs `mlr3`\n\n::: {layout=\"[[100],[50,50]]\"}\n![](mlr3_tidy_cv_ask.png)\n\n![](mlr3_tidy_cv_tidymodels.png)\n\n![](mlr3_tidy_cv_mlr3.png)\n:::\n\n## Resampling {.smaller}\n\n-   Dictionary: `mlr_resamplings`\n-   Sugar function: `rsmp()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.table(mlr_resamplings)\n```\n\n::: {.cell-output-display}\n|key         |label                         |params           | iters|\n|:-----------|:-----------------------------|:----------------|-----:|\n|bootstrap   |Bootstrap                     |ratio  , repeats |    30|\n|custom      |Custom Splits                 |                 |    NA|\n|custom_cv   |Custom Split Cross-Validation |                 |    NA|\n|cv          |Cross-Validation              |folds            |    10|\n|holdout     |Holdout                       |ratio            |     1|\n|insample    |Insample Resampling           |                 |     1|\n|loo         |Leave-One-Out                 |                 |    NA|\n|repeated_cv |Repeated Cross-Validation     |folds  , repeats |   100|\n|subsampling |Subsampling                   |ratio  , repeats |    30|\n:::\n:::\n\n<br>\n\n\n## Resampling {.smaller}\n\n-   `resample()`: initiate resampling\n-   `$aggregate()`: aggregate resampling performance\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3|4|5|6\"}\ntask = tsk(\"german_credit\")\nlearner = lrn(\"classif.ranger\", predict_type=\"prob\")\nresample = rsmp(\"cv\", folds=10)\nrr  = resample(task, learner, resample, store_model=T)\nmeasures = msrs(c(\"classif.acc\",\"classif.ppv\",\"classif.npv\",\"classif.auc\"))\nrr$aggregate(measures)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclassif.acc classif.ppv classif.npv classif.auc \n  0.7710000   0.7890524   0.6956910   0.7979774 \n```\n:::\n:::\n\n\n## Resampling\n\n\n::: {.cell layout=\"[[50,50]]\"}\n\n```{.r .cell-code}\nautoplot(rr, type=\"boxplot\", measure = msr(\"classif.acc\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-22-1.pdf)\n:::\n\n```{.r .cell-code}\nautoplot(rr, type=\"histogram\", measure = msr(\"classif.acc\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-22-2.pdf)\n:::\n:::\n\n\n# Benchmarking\n\n## `tidymodels` vs `mlr3`\n\n::: {layout=\"[[100],[50,50]]\"}\n![](mlr3_tidy_benchmark_ask.png)\n\n![](mlr3_tidy_benchmark_tidymodels.png){width=\"100%\"}\n\n![](mlr3_tidy_benchmark_mlr3.png)\n:::\n\n## Benchmarking {.smaller}\n\n-   Comparison of multiple learners on a single task (or multiple tasks).\n-   `benchmark_grid()`: design a benchmarking\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1|3-7|9|11-14\"}\ntasks = tsks(c(\"german_credit\", \"sonar\", \"breast_cancer\"))\n\nlearners = list(\n  lrn(\"classif.log_reg\", predict_type=\"prob\", id=\"LR\"),\n  lrn(\"classif.rpart\", predict_type=\"prob\", id=\"DT\"),\n  lrn(\"classif.ranger\", predict_type=\"prob\", id=\"RF\")\n)\n\nrsmp = rsmp(\"cv\", folds=5)\n\ndesign = benchmark_grid(\n  tasks = tasks, \n  learners = learners, \n  resamplings = rsmp)\n```\n:::\n\n\n## Benchmarking {.smaller}\n\n-   `benchmark()`: execute benchmarking\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr = benchmark(design)\nmeasures = msrs(c(\"classif.acc\",\"classif.ppv\", \"classif.npv\", \"classif.auc\"))\nas.data.table(bmr$aggregate(measures))[,-c(\"nr\",\"resample_result\",\"resampling_id\",\"iters\")] |> DT()\n```\n\n::: {.cell-output-display}\n|task_id       |learner_id | classif.acc| classif.ppv| classif.npv| classif.auc|\n|:-------------|:----------|-----------:|-----------:|-----------:|-----------:|\n|german_credit |LR         |   0.7540000|   0.7959935|   0.6128794|   0.7682786|\n|german_credit |DT         |   0.7220000|   0.7720000|   0.5715187|   0.7009023|\n|german_credit |RF         |   0.7670000|   0.7866093|   0.6820459|   0.7916496|\n|sonar         |LR         |   0.7027875|   0.7229497|   0.6805154|   0.7122449|\n|sonar         |DT         |   0.7262485|   0.7250771|   0.7382659|   0.7524838|\n|sonar         |RF         |   0.8174216|   0.8101012|   0.8425397|   0.9232502|\n|breast_cancer |LR         |   0.9252791|   0.9361270|   0.9195608|   0.9418515|\n|breast_cancer |DT         |   0.9502362|   0.9167371|   0.9675106|   0.9543396|\n|breast_cancer |RF         |   0.9751181|   0.9549859|   0.9860113|   0.9938067|\n:::\n:::\n\n\n<br>\n\n## Benchmarking result\n\n\n::: {.cell layout-align=\"center\" output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|1|2-6|7|8-11|12|13\"}\ntask = tsk(\"german_credit\")\nlearners = list(\n  lrn(\"classif.log_reg\", predict_type=\"prob\"),\n  lrn(\"classif.rpart\", predict_type=\"prob\"),\n  lrn(\"classif.ranger\", predict_type=\"prob\")\n)\ncv10 = rsmp(\"cv\", folds=10)\ndesign = benchmark_grid(\n  task = task, \n  learners = learners, \n  resamplings = cv10)\nbmr = benchmark(design)\nautoplot(bmr, measure = msr(\"classif.auc\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-25-1.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n## Benchmarking result\n\n\n::: {.cell layout=\"[[50,50]]\" layout-align=\"center\"}\n\n```{.r .cell-code}\nautoplot(bmr, type = \"roc\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-26-1.pdf){fig-align='center'}\n:::\n\n```{.r .cell-code}\nautoplot(bmr, type = \"prc\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-26-2.pdf){fig-align='center'}\n:::\n:::\n\n\n## More about `mlr3` {.smaller}\n\n::: incremental\n-   Hyperparameter optimization\n-   Feature selection\n-   ML pipelines\n:::\n\n## Summary\n\n::: incremental\n\n`mlr3`\n\n-   `R6`, `data.table` based ML framework\n-   Sugar function + Dictionary\n-   Task, Learner, Measure\n-   Resampling\n-   Benchmarking\n-   Still in development (ver 0.16.0)\n-   A great textbook: [**mlr3book**](https://mlr3book.mlr-org.com)\n:::\n\n# Thank you for listening! {align=\"center\"}\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}