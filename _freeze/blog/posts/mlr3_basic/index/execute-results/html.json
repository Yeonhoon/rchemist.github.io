{
  "hash": "7260762bdc99a63b741c37a097a732dc",
  "result": {
    "markdown": "---\ntitle: 'mlr3 기초'\ndescription: \"mlr3 소개, mlr3 필수문법, mlr3 모델링 기초에 대해 배워봅시다.\"\ndate: '2023-02-20'\ncategories: [mlr3, R, machine learning]\nimage: \"https://mlr3proba.mlr-org.com/logo.svg\"\n---\n\n\n::: callout-important\n\n## 안내사항\n이 글은 [mlr3book](https://mlr3book.mlr-org.com/)[^_mlr3_setup-1]을 참고하여 작성되었습니다. 국내 R 사용자들에게 잘 알려지지 않은 `mlr3`[^_mlr3_setup-2] 패키지를 활용하여 R에서도 손쉽게 머신러닝을 수행할 수 있다는 것을 보여드리고자 합니다.\n:::\n\n[^_mlr3_setup-1]: https://mlr3book.mlr-org.com/\n\n[^_mlr3_setup-2]: https://mlr3.mlr-org.com/\n\n\n\n# Introduction {#sec-introduction}\n\n`mlr3` (Machine Learning in R) 패키지와 생태계는 R 언어에서 분류 (classification), 회귀 (regression), 기타 머신러닝 작업들을 수행할 수 있도록 도와주는 포괄적, 객체 지향적(Object Oriented), 확장 가능한 프레임워크입니다.\n\n`mlr3` 는 R의 `caret`, `tidymodels`, Python의 `scikit-learn`과 마찬가지로 여러 머신러닝 알고리즘들을 통합하여 하나의 통일된 인터페이스로 제공함으로써 머신러닝 작업을 더 적절하게 수행할 수 있게끔 도와주는 패키지입니다.\n\nmlr3가 어떻게 작동하는지 빠르게 파악하고 싶으시다면, mlr3 [cheatsheets](https://cheatsheets.mlr-org.com/mlr3.pdf)을 살펴보시기 바랍니다.\n\n`mlr3verse`는 `mlr3`의 생태계로써, 머신러닝을 위한 R 패키지들의 집합체로 이루어져 있습니다. `mlr3` 패키지에서는 머신러닝을 위한 기본적인 코드들을 제공하고, 추가적인 학습 알고리즘, 파라미터 튜닝, 피처 선택 등은 확장 패키지들을 통해 이용할 수 있습니다.\n\n[![reference: mlr-org.com](https://raw.githubusercontent.com/mlr-org/mlr3/master/man/figures/mlr3verse.svg?sanitize=true){fig-align=\"center\"}](https://mlr-org.com/ecosystem.html)\n\n`mlr3` 생태계는 R의 `R6`와 `data.table`을 기반으로 만들어졌습니다. `R6`는 객체지향 (object orientation)을 위해, `data.table`은 데이터를 저장하고 작동시키기 위해 사용되었습니다.\n\n`mlr3`의 원활한 사용을 위해, 두 패키지의 기초를 살펴보도록 합시다.\n\n## R6\n\nR6는 객체지향 프로그래밍 (OOP)을 위한 R의 최근 패러다임 중 하나입니다. R6는 S3와 같이 R에 존재하던 기존의 객체지향성의 단점을 해결하는것이 특징입니다. 아마 다른 프로그래밍 언어에서 객체 지향 개념을 다루어 보셨다면, R6가 더 익숙하게 느껴질 것입니다.\n\n`R6`에서 객체(object)는 `R6Class()` 생성자 객체와 더불어 `$new()`메소드를 통해 생성됩니다.\n\n예를 들어 보겠습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(R6)\nFoo = R6Class()\nfoo = Foo$new()\n```\n:::\n\n\n이 객체들은 자신들의 필드 안에서 변환 가능하도록 압축된 상태를 띄고 있는데, 우리는 이 객체들에 `$` 기호를 통해 접근할 수 있습니다.\n\n필드 뿐만 아니라, 객체들이 갖고 있는 메소드를 통해 각 객체의 상태를 파악하고 정보를 검색하거나, 객체의 내부 상태를 변경할 수 있습니다. 예를 들어 `mlr3` 의 학습모델(learner) 의 `$train()` 메소드를 통해, 모델을 학습된 상태로 변경할 수 있고, 이를 통해 예측을 할 수 있게 됩니다.\n\n::: callout-note\n`R6` 객체의 내부 요소는 다음과 같이 부릅니다.\n\n-   `$field`: 필드, 정보\n\n-   `$method()`: 메소드, 특정 동작 실행\n:::\n\n`R6` 객체들은 각각의 환경(environment)로서, 참조 특성 (reference semantics)을 갖습니다. 예를 들어, foo2 = foo 를 실행할 시, foo2 는 foo가 복사된 것은 아니지만, 하나의 객체를 참조하고 있는 것입니다. 따라서, `foo$bar = 3` 을 실행할 시, `foo2$bar` 역시 3이 됩니다.\n\n객체를 복사할 경우 `$clone()` 메소드와 `deep = TRUE` 인자를 사용해야 합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfoo2 = foo$clone(deep=TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mlr3verse)\n```\n:::\n\n\n::: callout-tip\nR6에 대해 더 자세히 알고 싶다면, R6 [vignettes](https://r6.r-lib.org/), 특히 [introduction](https://r6.r-lib.org/articles/Introduction.html)부분을 참고하세요. 포괄적인 R6의 정보를 얻고 싶다면, [Advanced R의 R6 챕터](https://adv-r.hadley.nz/r6.html)를 참고하세요.\n:::\n\n------------------------------------------------------------------------\n\n### `mlr3`의 필수 활용요소\n\n#### Sugar functions\n\n대부분의 `mlr3` 객체들은 sugar function으로 불리는 간편한 함수들을 제공합니다. 다시 말해, sugar function은 원래의 코드에 대한 단축키(shortcut)로서 사용자가 입력해야 하는 코드를 줄여줍니다. 예를 들어 `lrn(\"regr.rpart\")` 는 `LearnerRegrRpart$new()` 의 sugar 버전입니다.\n\n#### Dictionaries\n\n`mlr3`는 러너(`learners`)나 태스크(`tasks`) 객체들을 저장하기 위해 dictionary 구조를 사용합니다. dictionary 구조는 key와 value로 이루어져 있어 key와 value를 연관시켜주는데, 이는 실제 사전의 단어와 단어의 설명과 같다고 이해하시면 됩니다.\n\ndictionary는 연관된 객체들을 묶어 나열하고 검색하기 쉽게 하기 위해 사용됩니다. 예를 들어 특정 학습모델을 검색할 때, `mlr_learners` dictionary에 원하는 러너(key)를 입력하면 검색이 가능합니다.\n\n예를 들면 다음과 같습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(mlr3)\nmlr_learners$get('classif.rpart')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<LearnerClassifRpart:classif.rpart>: Classification Tree\n* Model: -\n* Parameters: xval=0\n* Packages: mlr3, rpart\n* Predict Types:  [response], prob\n* Feature Types: logical, integer, numeric, factor, ordered\n* Properties: importance, missings, multiclass, selected_features,\n  twoclass, weights\n```\n:::\n:::\n\n\n또한 `as.data.table(mlr3_learners)` 모든 학습 모델의 정보를 확인할 수도 있습니다.\n\n#### `mlr3viz`\n\n`mlr3viz`는 `mlr3` 생태계 안에서 시각화를 담당하는 패키지입니다. `ggplot2`의 `theme_minimal()`을 적용시킨 동일한 배경의 그래프들을 생성합니다. `mlr3viz`는 `ggplot2` 를 기반으로 하고 있으며, `fortify`와 `autoplot` 라는 확장 패키지를 통해 예측, 학습모델, 벤치마크 객체 등 `mlr3`의 결과물들을 시각화하는 데 사용됩니다. `mlr3viz`에서 가장 많이 사용되는 것은 `autoplot()`으로, 객체의 타입에 따라 그래프의 출력 결과가 결정됩니다.\n\n------------------------------------------------------------------------\n\n# Data & Modeling {#sec-basics}\n\n## Tasks\n\n태스크(`task`)는 일반적으로 테이블 형태의 데이터와 머신러닝 문제들을 정의한 메타데이터를 갖고 있는 객체입니다. 예를 들면 머신러닝의 분류에서 타겟 피처(feature)의 이름이 메타 데이터 입니다.\n\n한마디로, 태스크는 우리가 활용하는 기본 데이터와 머신러닝을 위해 필요한 데이터들을 담아둔 정보 등이 포함된 객체입니다.\n\n이 메타 데이터는 사용자가 모덜이 학습될 때 예측 타겟을 다시 지정해줄 필요 없도록 태스크와 함께 작동하게 됩니다.\n\n::: callout-note\n\n## 용어 표현\n\nTask와 Learner 등 영어로 지정된 단어들은 따로 번역하지 않고, 소리 그대로 **\"태스크\"**와 **\"러너\"**로 부르겠습니다.\n:::\n\n### 내장 태스크\n\n`mlr3`에는 `mlr_tasks`라고 하는 R6 Dictionary 를 통해 미리 지정된 머신러닝 태스크를 제공하고 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmlr_tasks\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<DictionaryTask> with 20 stored values\nKeys: bike_sharing, boston_housing, breast_cancer, german_credit, ilpd,\n  iris, kc_housing, moneyball, mtcars, optdigits, penguins,\n  penguins_simple, pima, ruspini, sonar, spam, titanic, usarrests,\n  wine, zoo\n```\n:::\n:::\n\n\n`mlr_tasks`에 내장된 태스크를 가져오기 위해선, `tsk()` 함수와 불러오고자 하는 태스크의 이름을 입력하면 됩니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntask_mtcars = tsk(\"mtcars\")\ntask_mtcars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<TaskRegr:mtcars> (32 x 11): Motor Trends\n* Target: mpg\n* Properties: -\n* Features (10):\n  - dbl (10): am, carb, cyl, disp, drat, gear, hp, qsec, vs, wt\n```\n:::\n:::\n\n\n\n::: callout-tip\n\n## 도움말 보기\n\n일반적으로 R에서 도움말을 보기 위해선 `help()`나 `?`를 이용합니다. mlr3의 `R6` 클래스들도 마찬가지로 `?mlr_tasks_mtcars`와 같이 `?`을 이용해서 도움말을 찾아볼 수 있습니다.\n뿐만 아니라 인스턴스의 `task_mtcars$help()`와 같이 `$help()` 메소드를 이용해, 도움말 페이지로 접근할 수 있습니다.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntask_sonar = tsk('sonar')\nsplit = partition(task_sonar, ratio=.7)\n```\n:::\n\n\n### 외부 데이터 태스크로 변환\n\n`mlr3`에서 제공하는 데이터가 아닌, 외부의 데이터셋을 `mlr3` 태스크로 활용하려면 아래와 같이 데이터셋을 태스크로 변환하는 작업이 필요합니다. 예를 들어, `mtcars` 데이터셋을 `mlr3`의 회귀 태스크로 직접 변환하고자 할 때, `as_task_regr()` 함수를 이용합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(survival)\nlibrary(data.table)\nmtcars_subset = subset(mtcars, select = c(\"mpg\", \"cyl\", \"disp\"))\nstr(mtcars_subset)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t32 obs. of  3 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n```\n:::\n\n```{.r .cell-code}\ntsk_mtcars = as_task_regr(mtcars_subset, target=\"mpg\", id=\"cars\")\n```\n:::\n\n\n태스크를 설정할 때, 반드시 `target` 인자를 지정해줌으로써 target 열을 지정합니다.  `id` 인자는 선택사항으로, 특정 태스크에 이름을 부여하는 것입니다. \n\n::: callout-tip\n\n## UTF8 열(column)이름\n\n외부의 데이터를 태스크로 변환할 때, [UTF8 이름](https://en.wikipedia.org/wiki/UTF-8)을 따르지 않는 경우, 머신러닝 학습과정에서 오류가 발생합니다. 따라서 `make.names()` 함수를 이용해 데이터의 열 이름을 변경하는 것을 권장합니다.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mlr3viz)\nautoplot(tsk_mtcars, type = \"pairs\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### 데이터 살펴보기\n\n태스크 객체는 테이블 형태의 데이터와 함께, 메타 데이터를 포함하고 있습니다. 예를 들면 행과 열의 개수, 피처(feature) 변수, 타겟 변수와 각 변수의 데이터유형 등을 확인할 수 있습니다.\n\n이런 메타 데이터들은 각 객체의 field를 통해 확인이 가능합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(tsk_mtcars$nrow, tsk_mtcars$ncol)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32  3\n```\n:::\n:::\n\n\n피처와 타겟변수의 이름은 각각 `$feature_names` 와 `$target_names` 에 저장되어 있습니다. 여기서 `target`은 예측하고자 하는 변수를 의미합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsk_mtcars$feature_names\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"cyl\"  \"disp\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntsk_mtcars$target_names\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"mpg\"\n```\n:::\n:::\n\n\n한편 태스크 안에 들어있는 데이터는 `data.table` 객체로, `$data()` 메소드를 통해 확인할 수 있습니다. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsk_mtcars$data()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"mpg\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"cyl\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"disp\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"21.0\",\"2\":\"6\",\"3\":\"160.0\"},{\"1\":\"21.0\",\"2\":\"6\",\"3\":\"160.0\"},{\"1\":\"22.8\",\"2\":\"4\",\"3\":\"108.0\"},{\"1\":\"21.4\",\"2\":\"6\",\"3\":\"258.0\"},{\"1\":\"18.7\",\"2\":\"8\",\"3\":\"360.0\"},{\"1\":\"18.1\",\"2\":\"6\",\"3\":\"225.0\"},{\"1\":\"14.3\",\"2\":\"8\",\"3\":\"360.0\"},{\"1\":\"24.4\",\"2\":\"4\",\"3\":\"146.7\"},{\"1\":\"22.8\",\"2\":\"4\",\"3\":\"140.8\"},{\"1\":\"19.2\",\"2\":\"6\",\"3\":\"167.6\"},{\"1\":\"17.8\",\"2\":\"6\",\"3\":\"167.6\"},{\"1\":\"16.4\",\"2\":\"8\",\"3\":\"275.8\"},{\"1\":\"17.3\",\"2\":\"8\",\"3\":\"275.8\"},{\"1\":\"15.2\",\"2\":\"8\",\"3\":\"275.8\"},{\"1\":\"10.4\",\"2\":\"8\",\"3\":\"472.0\"},{\"1\":\"10.4\",\"2\":\"8\",\"3\":\"460.0\"},{\"1\":\"14.7\",\"2\":\"8\",\"3\":\"440.0\"},{\"1\":\"32.4\",\"2\":\"4\",\"3\":\"78.7\"},{\"1\":\"30.4\",\"2\":\"4\",\"3\":\"75.7\"},{\"1\":\"33.9\",\"2\":\"4\",\"3\":\"71.1\"},{\"1\":\"21.5\",\"2\":\"4\",\"3\":\"120.1\"},{\"1\":\"15.5\",\"2\":\"8\",\"3\":\"318.0\"},{\"1\":\"15.2\",\"2\":\"8\",\"3\":\"304.0\"},{\"1\":\"13.3\",\"2\":\"8\",\"3\":\"350.0\"},{\"1\":\"19.2\",\"2\":\"8\",\"3\":\"400.0\"},{\"1\":\"27.3\",\"2\":\"4\",\"3\":\"79.0\"},{\"1\":\"26.0\",\"2\":\"4\",\"3\":\"120.3\"},{\"1\":\"30.4\",\"2\":\"4\",\"3\":\"95.1\"},{\"1\":\"15.8\",\"2\":\"8\",\"3\":\"351.0\"},{\"1\":\"19.7\",\"2\":\"6\",\"3\":\"145.0\"},{\"1\":\"15.0\",\"2\":\"8\",\"3\":\"301.0\"},{\"1\":\"21.4\",\"2\":\"4\",\"3\":\"121.0\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n`$data()` 메소드 안에서 rows와 cols를 통해 원하는 데이터를 확인할 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsk_mtcars$data(rows=1:3, cols=tsk_mtcars$feature_names)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"cyl\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"disp\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"6\",\"2\":\"160\"},{\"1\":\"6\",\"2\":\"160\"},{\"1\":\"4\",\"2\":\"108\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n태스크를 `data.table` 객체로 바꾼다면, R에서 사용되는 데이터프레임 관련 모든 함수들을 사용할 수 있습니다. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(as.data.table(tsk_mtcars))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      mpg             cyl             disp      \n Min.   :10.40   Min.   :4.000   Min.   : 71.1  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8  \n Median :19.20   Median :6.000   Median :196.3  \n Mean   :20.09   Mean   :6.188   Mean   :230.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0  \n```\n:::\n:::\n\n\n### 태스크 변환자(Mutators)\n\n머신러닝을 수행하며, 행과 열들을 선택하는 경우가 종종 있습니다. 예를 들면 훈련 데이터와 검증 데이터를 분리하기 위해 행을 선택하는 경우, 모델링에 넣을 피처들을 선택하는 경우가 있겠죠.\n\n`mlr3`의 태스크는 행을 선택하는 `$filter()`, 열을 선택하는 `$select()` 를 이용해 원하는 조건의 데이터를 추출할 수 있습니다.\n\n여기서 한 가지 주의해야 할 것이 있습니다. `$select()`와 `$filter()`는 변환자이기 때문에, 기존의 태스크 객체를 수정하게 됩니다. 다시 말해, 행이나 열을 선택하게 되면 처음의 태스크 객체도 변경된다는 것이죠.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntask_iris = tsk(\"iris\")\ntask_iris$select(c(\"Sepal.Length\",\"Petal.Width\"))\ntask_iris$filter(2:4)\ntask_iris$data()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"Petal.Width\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Sepal.Length\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"setosa\",\"2\":\"0.2\",\"3\":\"4.9\"},{\"1\":\"setosa\",\"2\":\"0.2\",\"3\":\"4.7\"},{\"1\":\"setosa\",\"2\":\"0.2\",\"3\":\"4.6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n이를 방지하기 위해서는 `$clone()` 메소드를 이용해 새로운 태스크로 복사한 뒤에 행이나 열을 선택하는 작업하시면 됩니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntask_iris_copy = task_iris$clone()\ntask_iris_copy$filter(2)\ntask_iris_copy$data()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"Petal.Width\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Sepal.Length\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"setosa\",\"2\":\"0.2\",\"3\":\"4.9\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntask_iris$data()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"Petal.Width\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Sepal.Length\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"setosa\",\"2\":\"0.2\",\"3\":\"4.9\"},{\"1\":\"setosa\",\"2\":\"0.2\",\"3\":\"4.7\"},{\"1\":\"setosa\",\"2\":\"0.2\",\"3\":\"4.6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n`task_iris_copy`는 `task_iris`를 복사한 뒤, 2번째 행을 `$filter()` 했지만, `task_iris`의 데이터는 아무 변화가 없는 것을 확인할 수 있습니다.\n\n## Learner\n\n러너 클래스는 널리 알려진 다양한 머신러닝 알고리즘들을 통일된 형태로 제공합니다. 태스크와 마찬가지로 `mlr_learners` dictionary를 통해 확인할 수 있습니다.\n\n러너는 머신러닝 모델을 학습(train)하고 예측하는 역할을 수행합니다. 태스크와 마찬가지로, 러너의 sugar function인 `lrn()` 을 활용해 러너를 사용할 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlrn(\"regr.rpart\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<LearnerRegrRpart:regr.rpart>: Regression Tree\n* Model: -\n* Parameters: xval=0\n* Packages: mlr3, rpart\n* Predict Types:  [response]\n* Feature Types: logical, integer, numeric, factor, ordered\n* Properties: importance, missings, selected_features, weights\n```\n:::\n:::\n\n\n러너의 기본 형태는 `Learner`입니다. Learner로 시작하는 다양한 러너들이 존재합니다. `mlr3`의 러너들은 [`mlr3learners`](https://mlr3learners.mlr-org.com/)와 [`mlr3extralearners`](https://mlr3extralearners.mlr-org.com/)패키지를 통해 확인 가능합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.table(mlr_learners) |> head()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"key\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"label\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"task_type\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"feature_types\"],\"name\":[4],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"packages\"],\"name\":[5],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"properties\"],\"name\":[6],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"predict_types\"],\"name\":[7],\"type\":[\"list\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"classif.cv_glmnet\",\"2\":\"NA\",\"3\":\"classif\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [4]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.debug\",\"2\":\"Debug Learner for Classification\",\"3\":\"classif\",\"4\":\"<chr [6]>\",\"5\":\"<chr [1]>\",\"6\":\"<chr [4]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.featureless\",\"2\":\"Featureless Classification Learner\",\"3\":\"classif\",\"4\":\"<chr [7]>\",\"5\":\"<chr [1]>\",\"6\":\"<chr [6]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.glmnet\",\"2\":\"NA\",\"3\":\"classif\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.kknn\",\"2\":\"NA\",\"3\":\"classif\",\"4\":\"<chr [5]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [2]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.lda\",\"2\":\"NA\",\"3\":\"classif\",\"4\":\"<chr [5]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [2]>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n::: callout-caution\n\n## 패키지 설치\nmlr3의 러너를 실행하기 위한 패키지가 없다면 아래와 같은 경고 메시지가 뜹니다.\n\n```         \nWarning: Package 'ranger' required but not installed for Learner 'classif.ranger\n```\n\n이러한 에러는 패키지를 설치해주시면 간단히 해결됩니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ranger\")\n```\n:::\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlrn_rpart = lrn('regr.rpart')\nlrn_rpart\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<LearnerRegrRpart:regr.rpart>: Regression Tree\n* Model: -\n* Parameters: xval=0\n* Packages: mlr3, rpart\n* Predict Types:  [response]\n* Feature Types: logical, integer, numeric, factor, ordered\n* Properties: importance, missings, selected_features, weights\n```\n:::\n:::\n\n\n각 러너들은 아래의 메타데이터를 갖고 있습니다.\n\n-   `$feature_types`: 피처들의 유형\n\n-   `$packages`: 모델을 학습시키고 예측하기 위해 필요한 패키지들\n\n-   `$properties`: 해당 러너가 갖고 있는 추가적인 특성. 예를 들어 importance 특성이 있다면 학습 후, 각 피처들의 importance를 추출할 수 있습니다.\n\n-   `$predict_types`: 해당 러너를 활용해 가능한 예측 유형입니다. 분류 유형의 러너는 `response`와 `prob`을 출력합니다.\n\n-   `$param_set`: 가능한 하이퍼파라미터 세트\n\n<br>\n\n모든 러너들은 두 단계에 걸쳐 진행됩니다.\n\n-   학습 (Training): `$train()` 메소드를 통해 학습시키고자 하는 태스크를 학습합니다.\n\n-   예측 (Prediction): `$predict()` 메소드에 학습 때 사용하지 않은 데이터를 사용합니다. 학습 데이터를 기반으로 훈련된 모델이 새로운 데이터를 받아 예측값을 반환합니다.\n\n::: callout-warning\n\n## 예측 전 학습\n\n러너가 학습되지 않았다면(`$train()`이 실시되지 않았다면) `$predict()` 실행 시 에러가 발생합니다.\n:::\n\n### Train: 학습시키기\n\n앞서 말했듯이, `mlr3`에서는 러너에 태스크를 투입하여 모델을 학습시킵니다. 머신러닝에서는 태스크를 투입하기 전, 훈련에 사용할 데이터와 예측에 사용할 데이터를 나누는 것이 일반적입니다.\n\n`mlr3` 에서는 `$partition()` 메소드를 이용해 두 개의 데이터로 나눌 수 있습니다. 기본값(default)은 전체 데이터의 67%를 훈련에, 나머지 33%를 예측에 사용합니다. 물론 이 비율은 ratio 인자 (범위: 0~1)를 통해 변경 가능합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsplits = partition(tsk_mtcars, ratio = 0.7)\nsplits\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$train\n [1]  1  4  5  9 10 21 25 27 32  6  7 11 12 15 17 22 23 24 31 18 19 20 28\n\n$test\n[1]  2  3  8 30 13 14 16 29 26\n```\n:::\n:::\n\n\n\n데이터를 나누었으니, 이제 모델을 학습시켜보도록 하겠습니다. 위에서 선언한 `rpart` 러너에서 `$train()` 메소드를 실행시킵니다. 태스크와 `row_ids`에는 splits 중 `train`에 해당하는 부분을 입력합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlrn_rpart$train(tsk_mtcars, row_ids = splits$train)\nlrn_rpart$model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nn= 23 \n\nnode), split, n, deviance, yval\n      * denotes terminal node\n\n1) root 23 901.0783 20.3913  \n  2) cyl>=5 15 127.9240 16.6800 *\n  3) cyl< 5 8 179.1600 27.3500 *\n```\n:::\n:::\n\n\n학습을 시킨 이후, `$model` 필드를 통해 학습된 결과를 확인할 수 있습니다.\n\n\n### Predict: 예측하기\n\n모델 학습이 완료되었다면, 예측값을 만들어볼 수 있습니다. splits의 test 행을 이용해 `$predict()` 메소드를 실행합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprediction = lrn_rpart$predict(tsk_mtcars,row_ids = splits$test)\nprediction\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<PredictionRegr> for 9 observations:\n    row_ids truth response\n          2  21.0    16.68\n          3  22.8    27.35\n          8  24.4    27.35\n---                       \n         16  10.4    16.68\n         29  15.8    16.68\n         26  27.3    27.35\n```\n:::\n:::\n\n\n`row_ids` 는 예측 데이터의 행의 번호와 동일합니다. `truth`는 태스크에 저장되어 있는 테스트 데이터의 실제값을 의미하고 `response`는 학습시킨 모델이 예측한 값을 의미합니다. 각각의 열은 `Prediction` 객체의 필드를 통해 확인할 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprediction$response\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16.68 27.35 27.35 16.68 16.68 16.68 16.68 16.68 27.35\n```\n:::\n:::\n\n\n`mlr3viz`를 이용해 Prediction 객체를 시각화할 수 있습니다.\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(prediction)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n만약 splits로 나눈 데이터가 아니라 데이터프레임 형태로 된 새로운 데이터를 활용해 예측값을 만들고 싶다면, `$predict_newdata()`를 사용하면 됩니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars_new = data.table(\n  cyl = c(5, 6), disp = c(100, 120),\n  hp = c(100, 150), drat = c(4, 3.9), wt = c(3.8, 4.1),\n  qsec = c(18, 19.5), vs = c(1, 0), am = c(1, 1),\n  gear = c(6, 4), carb = c(3, 5)\n)\nprediction = lrn_rpart$predict_newdata(mtcars_new)\nprediction\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<PredictionRegr> for 2 observations:\n row_ids truth response\n       1    NA    16.68\n       2    NA    16.68\n```\n:::\n:::\n\n물론 새로 생성한 `mtcars_new` 데이터는 실제 값이 제공되지 않았기 때문에, `Prediction` 객체의 truth는 `NA`로 출력됩니다.\n\n일반적으로 회귀 모델에서는 타겟의 값을 예측하지만, 일부 회귀 모델은 표준 오차(standard error, SE) 또한 예측할 수 있습니다. 이를 위해서는 `$predict_type` 필드가 기본값인 `response` 에서 `se`로 변경되어야 합니다. 위에서 다루었던 의사결정나무(`regr.rpart`) 모델은 표준오차 설정이 불가능하기 때문에, 선형 회귀모형으로 예시를 들어보겠습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlrn_lm = lrn(\"regr.lm\", predict_type = \"se\")\nlrn_lm$train(tsk_mtcars, splits$train)\nlrn_lm$predict(tsk_mtcars, splits$test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<PredictionRegr> for 9 observations:\n    row_ids truth response       se\n          2  21.0 22.11158 1.192766\n          3  22.8 26.64815 1.167893\n          8  24.4 25.90958 1.393723\n---                                \n         16  10.4 12.84206 1.940138\n         29  15.8 14.92227 1.042515\n         26  27.3 27.20160 1.172699\n```\n:::\n:::\n\n\n### Hyperparameters\n\n각 러너들은 학습에 영향을 미치는 하이퍼파라미터들을 설정해줄 수 있습니다. 하이퍼라미터를 통해 모델이 어떻게 학습되는지, 또는 어떻게 예측값을 생성할지 등을 조정해줄 수 있습니다. \n\n#### Paradox, Parameter Sets\n\n위의 예시에서 사용하던 의사결정나무 하이퍼파라미터에 접근해보겠습니다.\n\n::: {.cell}\n\n```{.r .cell-code}\nlrn_rpart$param_set\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<ParamSet>\n                id    class lower upper nlevels\n            <char>   <char> <num> <num>   <num>\n 1:             cp ParamDbl     0     1     Inf\n 2:     keep_model ParamLgl    NA    NA       2\n 3:     maxcompete ParamInt     0   Inf     Inf\n 4:       maxdepth ParamInt     1    30      30\n 5:   maxsurrogate ParamInt     0   Inf     Inf\n 6:      minbucket ParamInt     1   Inf     Inf\n 7:       minsplit ParamInt     1   Inf     Inf\n 8: surrogatestyle ParamInt     0     1       2\n 9:   usesurrogate ParamInt     0     2       3\n10:           xval ParamInt     0   Inf     Inf\n                                                                                      default\n                                                                                       <list>\n 1:                                                                                      0.01\n 2:                                                                                     FALSE\n 3:                                                                                         4\n 4:                                                                                        30\n 5:                                                                                         5\n 6: <NoDefault>\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n 7:                                                                                        20\n 8:                                                                                         0\n 9:                                                                                         2\n10:                                                                                        10\n     value\n    <list>\n 1:       \n 2:       \n 3:       \n 4:       \n 5:       \n 6:       \n 7:       \n 8:       \n 9:       \n10:      0\n```\n:::\n:::\n\n\n위의 결과는 `paradox::ParamSet` 객체입니다. 이 객체는 하이퍼파라미터의 이름(`id`), 데이터 유형(`class`), 하이퍼파라미터의 범위(`lower`, `upper`), 범주형일 경우의 범주의 수(`nlevels`), 초기값(`default`), 그리고 최종적으로 설정된 값(`value`) 에 대한 정보를 담고 있습니다.\n\n아래의 표는 사용가능한 하이퍼파라미터 유형들에 대한 표입니다.\n\n| Hyperparameter Class | Description  |\n| -------------------- | ------------ |\n|`ParamDbl`\t| Real-valued (Numeric) Parameters|\n|`ParamInt`\t| Integer Parameters|\n|`ParamFct`\t| Categorical (Factor) Parameters|\n|`ParamLgl`\t| Logical / Boolean Parameters|\n|`ParamUty`\t| Untyped Parameters|\n\n의사결정나무 예시에서, `ParamSet`을 바탕으로 다음의 내용을 추론할 수 있습니다.\n\n-   `cp` 는 반드시 0 (`lower`)과 1 (`upper`) 사이의 범위를 갖는 double (`ParamDbl`) 형태의 변수여야 하고, 초기값은 0.01 (`default`)\n-   `keep_model`은 반드시 `TRUE나` `FALSE` 값을 갖는 logical (`ParamLgl`) 형태의 값이어야 함\n-   `xval`은 0과 무한대(Inf) 범위를 갖는 정수(ParamInt)여야 하고, 초기값 10을 가지며, 현재 값이 0으로 설정되어 있음\n\n#### 하이퍼파리미터 확인 및 설정\n\n위와 같이 하이퍼 파라미터에 접근한 뒤, 기존의 값을 원하는 값으로 변경하거나, 새로운 하이퍼파라미터에 값을 설정해줄 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlrn_rpart$param_set$values$cp = 0.2\nlrn_rpart$param_set$values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$xval\n[1] 0\n\n$cp\n[1] 0.2\n```\n:::\n:::\n\n\n변경된 파라미터가 적용된 것을 확인할 수 있습니다.\n\n::: callout-note\n\n### 하이퍼파라미터 최적화\n하이퍼 파라미터에 대한 자세한 설명은 [mlr3 하이퍼파라미터 최적화 포스트](https://rchemistblog.com/blog/posts/mlr3_hyperparameter/)에서 더 자세히 다루도록 하겠습니다.\n\n:::\n\n### Evaluation: 평가\n\n아마 머신러닝 모델링 과정에서 가장 중요한 단계가 바로 모델의 성능 평가일 것입니다. 평가를 하지 않는다면 아무리 잘 만든 모델이라도 그 성능을 알 수 없기 때문이죠. 평가에서는 앞서 만든 객체들을 바탕으로 모델의 성능을 평가해보도록 하겠습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlrn_rpart = lrn(\"regr.rpart\")\ntsk_mtcars = tsk(\"mtcars\")\nsplits = partition(tsk_mtcars)\nlrn_rpart$train(tsk_mtcars, splits$train)\nprediction = lrn_rpart$predict(tsk_mtcars, splits$test)\n```\n:::\n\n\n#### Measures\n\n예측값이 잘 예측되었는지는 데이터의 실제값과 머신러닝 모델이 예측한 예측값의 비교를 통해 평가됩니다. 태스크와 러너와 비슷하게, `mlr3`에서는 측정기준들이 `mlr_measures`라고 불리는 딕셔너리에 저장되어 있습니다. 이는 `msr()`로 사용 가능합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.table(msr())\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"key\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"label\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"task_type\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"packages\"],\"name\":[4],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"predict_type\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"task_properties\"],\"name\":[6],\"type\":[\"list\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"aic\",\"2\":\"Akaike Information Criterion\",\"3\":\"NA\",\"4\":\"<chr [1]>\",\"5\":\"NA\",\"6\":\"<chr [0]>\"},{\"1\":\"bic\",\"2\":\"Bayesian Information Criterion\",\"3\":\"NA\",\"4\":\"<chr [1]>\",\"5\":\"NA\",\"6\":\"<chr [0]>\"},{\"1\":\"classif.acc\",\"2\":\"Classification Accuracy\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"classif.auc\",\"2\":\"Area Under the ROC Curve\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"prob\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.bacc\",\"2\":\"Balanced Accuracy\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"classif.bbrier\",\"2\":\"Binary Brier Score\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"prob\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.ce\",\"2\":\"Classification Error\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"classif.costs\",\"2\":\"Cost-sensitive Classification\",\"3\":\"classif\",\"4\":\"<chr [1]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"classif.dor\",\"2\":\"Diagnostic Odds Ratio\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.fbeta\",\"2\":\"F-beta score\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.fdr\",\"2\":\"False Discovery Rate\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.fn\",\"2\":\"False Negatives\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.fnr\",\"2\":\"False Negative Rate\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.fomr\",\"2\":\"False Omission Rate\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.fp\",\"2\":\"False Positives\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.fpr\",\"2\":\"False Positive Rate\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.logloss\",\"2\":\"Log Loss\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"prob\",\"6\":\"<chr [0]>\"},{\"1\":\"classif.mauc_au1p\",\"2\":\"Weighted average 1 vs. 1 multiclass AUC\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"prob\",\"6\":\"<chr [0]>\"},{\"1\":\"classif.mauc_au1u\",\"2\":\"Average 1 vs. 1 multiclass AUC\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"prob\",\"6\":\"<chr [0]>\"},{\"1\":\"classif.mauc_aunp\",\"2\":\"Weighted average 1 vs. rest multiclass AUC\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"prob\",\"6\":\"<chr [0]>\"},{\"1\":\"classif.mauc_aunu\",\"2\":\"Average 1 vs. rest multiclass AUC\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"prob\",\"6\":\"<chr [0]>\"},{\"1\":\"classif.mbrier\",\"2\":\"Multiclass Brier Score\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"prob\",\"6\":\"<chr [0]>\"},{\"1\":\"classif.mcc\",\"2\":\"Matthews Correlation Coefficient\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.npv\",\"2\":\"Negative Predictive Value\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.ppv\",\"2\":\"Positive Predictive Value\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.prauc\",\"2\":\"Precision-Recall Curve\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"prob\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.precision\",\"2\":\"Precision\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.recall\",\"2\":\"Recall\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.sensitivity\",\"2\":\"Sensitivity\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.specificity\",\"2\":\"Specificity\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.tn\",\"2\":\"True Negatives\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.tnr\",\"2\":\"True Negative Rate\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.tp\",\"2\":\"True Positives\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"classif.tpr\",\"2\":\"True Positive Rate\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [1]>\"},{\"1\":\"clust.ch\",\"2\":\"Calinski Harabasz\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"partition\",\"6\":\"<chr [0]>\"},{\"1\":\"clust.dunn\",\"2\":\"Dunn\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"partition\",\"6\":\"<chr [0]>\"},{\"1\":\"clust.silhouette\",\"2\":\"Silhouette\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"partition\",\"6\":\"<chr [0]>\"},{\"1\":\"clust.wss\",\"2\":\"Within Sum of Squares\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"partition\",\"6\":\"<chr [0]>\"},{\"1\":\"debug_classif\",\"2\":\"Debug Classification Measure\",\"3\":\"NA\",\"4\":\"<chr [1]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"oob_error\",\"2\":\"Out-of-bag Error\",\"3\":\"NA\",\"4\":\"<chr [1]>\",\"5\":\"NA\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.bias\",\"2\":\"Bias\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.ktau\",\"2\":\"Kendall's tau\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.mae\",\"2\":\"Mean Absolute Error\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.mape\",\"2\":\"Mean Absolute Percent Error\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.maxae\",\"2\":\"Max Absolute Error\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.medae\",\"2\":\"Median Absolute Error\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.medse\",\"2\":\"Median Squared Error\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.mse\",\"2\":\"Mean Squared Error\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.msle\",\"2\":\"Mean Squared Log Error\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.pbias\",\"2\":\"Percent Bias\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.rae\",\"2\":\"Relative Absolute Error\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.rmse\",\"2\":\"Root Mean Squared Error\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.rmsle\",\"2\":\"Root Mean Squared Log Error\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.rrse\",\"2\":\"Root Relative Squared Error\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.rse\",\"2\":\"Relative Squared Error\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.rsq\",\"2\":\"R Squared\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.sae\",\"2\":\"Sum of Absolute Errors\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.smape\",\"2\":\"Symmetric Mean Absolute Percent Error\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.srho\",\"2\":\"Spearman's rho\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"regr.sse\",\"2\":\"Sum of Squared Errors\",\"3\":\"regr\",\"4\":\"<chr [2]>\",\"5\":\"response\",\"6\":\"<chr [0]>\"},{\"1\":\"selected_features\",\"2\":\"Absolute or Relative Frequency of Selected Features\",\"3\":\"NA\",\"4\":\"<chr [1]>\",\"5\":\"NA\",\"6\":\"<chr [0]>\"},{\"1\":\"sim.jaccard\",\"2\":\"Jaccard Similarity Index\",\"3\":\"NA\",\"4\":\"<chr [2]>\",\"5\":\"NA\",\"6\":\"<chr [0]>\"},{\"1\":\"sim.phi\",\"2\":\"Phi Coefficient Similarity\",\"3\":\"NA\",\"4\":\"<chr [2]>\",\"5\":\"NA\",\"6\":\"<chr [0]>\"},{\"1\":\"time_both\",\"2\":\"Elapsed Time\",\"3\":\"NA\",\"4\":\"<chr [1]>\",\"5\":\"NA\",\"6\":\"<chr [0]>\"},{\"1\":\"time_predict\",\"2\":\"Elapsed Time\",\"3\":\"NA\",\"4\":\"<chr [1]>\",\"5\":\"NA\",\"6\":\"<chr [0]>\"},{\"1\":\"time_train\",\"2\":\"Elapsed Time\",\"3\":\"NA\",\"4\":\"<chr [1]>\",\"5\":\"NA\",\"6\":\"<chr [0]>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n`mlr3`에서 시행되는 모든 측정값은 다음의 세 가지 요소에 의해 정의되어있습니다.\n예를 들어 mean absolute error(MAE)를 사용한다고 가정해보죠.\n\n::: {.cell}\n\n```{.r .cell-code}\nmeasure = msr(\"regr.mae\")\nmeasure\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<MeasureRegrSimple:regr.mae>: Mean Absolute Error\n* Packages: mlr3, mlr3measures\n* Range: [0, Inf]\n* Minimize: TRUE\n* Average: macro\n* Parameters: list()\n* Properties: -\n* Predict type: response\n```\n:::\n:::\n\n\n#### 예측값 점수 매기기\n\n모델의 성능을 계산하기 위해서는 prediction 객체의 `$score()` 메소드를 이용합니다. 이 때 `$score()` 메소드에는 평가하고자 하는 측정기준을 넣어줍니다.\n\n::: {.cell}\n\n```{.r .cell-code}\nprediction$score(measure)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nregr.mae \n 2.42987 \n```\n:::\n:::\n\n\n앞서 살펴보았던 `msr()` 함수는 하나의 성능 지표만 불러오는 함수였습니다. 여러 개의 성능을 동시에 확인하기 위해서는 `msrs()`를 이용하면 됩니다.\n\n::: {.cell}\n\n```{.r .cell-code}\nmeasures = msrs(c(\"regr.mse\",\"regr.mae\"))\nprediction$score(measures)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nregr.mse regr.mae \n9.565807 2.429870 \n```\n:::\n:::\n\n\n::: callout-tip\n\n## 기타 측정값들\nmlr3에서는 모델의 예측 성능 뿐만 아니라, 모델에 대한 메타정보 또한 측정할 수 있습니다. 예를 들어\n\n-   `msr(\"time_train\")` : 모델을 학습시키는 데 걸린 시간\n-   `msr(\"time_predict\")`: 모델로 예측하는 데 걸린 시간\n-   `msr(\"time_both\")` : 훈련 및 예측하는 데 걸린 시간\n-   `msr(\"selected_features\")`: 선택된 피처의 수 (모델에 `selected_features` 속성 있어야 사용 가능)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeasures = msrs(c(\"time_train\", \"time_predict\", \"time_both\"))\nprediction$score(measures, learner = lrn_rpart)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  time_train time_predict    time_both \n       0.002        0.001        0.003 \n```\n:::\n:::\n\n\n\n:::\n\n## 분류(Classification)\n\n분류 알고리즘은 연속적인 숫자를 예측하는 것이 아닌, 이산형(discrete), 범주형(categorical)한 값을 예측할 때 사용됩니다. 예를 들어 펭귄의 신체적인 특징을 바탕으로 어떤 종인지 분류하고자 할 때 분류 알고리즘을 사용할 수 있습니다.\n\n분류 역시 앞서 다루었던 회귀와 동일한 흐름으로 태스크, 러너를 활용한 예측, 성능 측정을 하게 됩니다. `mlr3`의 분류에 사용되는 코드의 특징들을 살펴보겠습니다.\n\n### 분류 모델 만들기\n\n위에서 언급한 것처럼, 분류와 회귀 모델을 만들 때에는 태스크, 러너, 측정이 모두 동일합니다. 다만 분류이기 때문에 `TaskClassif`, `LearnerClassif`, `MeasureClassif` 등의 객체가 각각 사용됩니다.\n\n간단하게 펭귄을 분류하는 모델을 하나 만들어보겠습니다.\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2023)\ntsk_penguins = tsk(\"penguins\")\nsplits = partition(tsk_penguins, ratio=.7)\n\n# modeling\nlrn_featureless = lrn(\"classif.featureless\")\nlrn_rpart = lrn(\"classif.rpart\", cp=.2, maxdepth=5)\n\nmeasure = msr(\"classif.acc\")\n\n# train learners\nlrn_featureless$train(tsk_penguins, splits$train)\nlrn_rpart$train(tsk_penguins, splits$train)\n\n# evaluation\nlrn_featureless$predict(tsk_penguins, splits$test)$score(measure)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclassif.acc \n  0.4466019 \n```\n:::\n\n```{.r .cell-code}\nlrn_rpart$predict(tsk_penguins, splits$test)$score(measure)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclassif.acc \n  0.9417476 \n```\n:::\n:::\n\n\n위의 사례에서 `palmerpenguins` 패키지에 있는 `penguins` 데이터셋을 활용하여 분류모델을 만들었습니다. 그 다음  featureless 모델(가장 기본적인 값으로)과 의사결정나무 모형으로 학습시킨 뒤, 예측 성능을 정확도(accuracy)로 측정하였습니다. 그 결과 기본 모형에 비해 의사결정 나무의 정확도가 훨씬 높게 나타났습니다.\n\n### TaskClassif\n\n분류 태스크는 회귀 태스크와 거의 유사합니다. 다만 타겟 변수가 범주형으로 되어있다는 것이 둘의 가장 큰 차이점입니다. \n\n`mlr3`에 포함되어있는 분류 태스크들을 보면 다음과 같습니다.\n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.table(mlr_tasks)[task_type==\"classif\"]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"key\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"label\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"task_type\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"nrow\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"ncol\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"properties\"],\"name\":[6],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"lgl\"],\"name\":[7],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"int\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"dbl\"],\"name\":[9],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"chr\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"fct\"],\"name\":[11],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"ord\"],\"name\":[12],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"pxc\"],\"name\":[13],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"breast_cancer\",\"2\":\"Wisconsin Breast Cancer\",\"3\":\"classif\",\"4\":\"683\",\"5\":\"10\",\"6\":\"<chr [1]>\",\"7\":\"0\",\"8\":\"0\",\"9\":\"0\",\"10\":\"0\",\"11\":\"0\",\"12\":\"9\",\"13\":\"0\"},{\"1\":\"german_credit\",\"2\":\"German Credit\",\"3\":\"classif\",\"4\":\"1000\",\"5\":\"21\",\"6\":\"<chr [1]>\",\"7\":\"0\",\"8\":\"3\",\"9\":\"0\",\"10\":\"0\",\"11\":\"14\",\"12\":\"3\",\"13\":\"0\"},{\"1\":\"ilpd\",\"2\":\"Indian Liver Patient Data\",\"3\":\"classif\",\"4\":\"583\",\"5\":\"11\",\"6\":\"<chr [1]>\",\"7\":\"0\",\"8\":\"4\",\"9\":\"5\",\"10\":\"0\",\"11\":\"1\",\"12\":\"0\",\"13\":\"0\"},{\"1\":\"iris\",\"2\":\"Iris Flowers\",\"3\":\"classif\",\"4\":\"150\",\"5\":\"5\",\"6\":\"<chr [1]>\",\"7\":\"0\",\"8\":\"0\",\"9\":\"4\",\"10\":\"0\",\"11\":\"0\",\"12\":\"0\",\"13\":\"0\"},{\"1\":\"optdigits\",\"2\":\"Optical Recognition of Handwritten Digits\",\"3\":\"classif\",\"4\":\"5620\",\"5\":\"65\",\"6\":\"<chr [1]>\",\"7\":\"0\",\"8\":\"64\",\"9\":\"0\",\"10\":\"0\",\"11\":\"0\",\"12\":\"0\",\"13\":\"0\"},{\"1\":\"penguins\",\"2\":\"Palmer Penguins\",\"3\":\"classif\",\"4\":\"344\",\"5\":\"8\",\"6\":\"<chr [1]>\",\"7\":\"0\",\"8\":\"3\",\"9\":\"2\",\"10\":\"0\",\"11\":\"2\",\"12\":\"0\",\"13\":\"0\"},{\"1\":\"penguins_simple\",\"2\":\"Simplified Palmer Penguins\",\"3\":\"classif\",\"4\":\"333\",\"5\":\"11\",\"6\":\"<chr [1]>\",\"7\":\"0\",\"8\":\"3\",\"9\":\"7\",\"10\":\"0\",\"11\":\"0\",\"12\":\"0\",\"13\":\"0\"},{\"1\":\"pima\",\"2\":\"Pima Indian Diabetes\",\"3\":\"classif\",\"4\":\"768\",\"5\":\"9\",\"6\":\"<chr [1]>\",\"7\":\"0\",\"8\":\"0\",\"9\":\"8\",\"10\":\"0\",\"11\":\"0\",\"12\":\"0\",\"13\":\"0\"},{\"1\":\"sonar\",\"2\":\"Sonar: Mines vs. Rocks\",\"3\":\"classif\",\"4\":\"208\",\"5\":\"61\",\"6\":\"<chr [1]>\",\"7\":\"0\",\"8\":\"0\",\"9\":\"60\",\"10\":\"0\",\"11\":\"0\",\"12\":\"0\",\"13\":\"0\"},{\"1\":\"spam\",\"2\":\"HP Spam Detection\",\"3\":\"classif\",\"4\":\"4601\",\"5\":\"58\",\"6\":\"<chr [1]>\",\"7\":\"0\",\"8\":\"0\",\"9\":\"57\",\"10\":\"0\",\"11\":\"0\",\"12\":\"0\",\"13\":\"0\"},{\"1\":\"titanic\",\"2\":\"Titanic\",\"3\":\"classif\",\"4\":\"1309\",\"5\":\"11\",\"6\":\"<chr [1]>\",\"7\":\"0\",\"8\":\"2\",\"9\":\"2\",\"10\":\"3\",\"11\":\"2\",\"12\":\"1\",\"13\":\"0\"},{\"1\":\"wine\",\"2\":\"Wine Regions\",\"3\":\"classif\",\"4\":\"178\",\"5\":\"14\",\"6\":\"<chr [1]>\",\"7\":\"0\",\"8\":\"2\",\"9\":\"11\",\"10\":\"0\",\"11\":\"0\",\"12\":\"0\",\"13\":\"0\"},{\"1\":\"zoo\",\"2\":\"Zoo Animals\",\"3\":\"classif\",\"4\":\"101\",\"5\":\"17\",\"6\":\"<chr [1]>\",\"7\":\"15\",\"8\":\"1\",\"9\":\"0\",\"10\":\"0\",\"11\":\"0\",\"12\":\"0\",\"13\":\"0\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n물론 `as_task_classif()`를 통해 외부 데이터셋으로 자신만의 분류 태스크를 만들 수도 있습니다.\n\n::: {.cell}\n\n```{.r .cell-code}\nas_task_classif(palmerpenguins::penguins, target=\"species\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<TaskClassif:palmerpenguins::penguins> (344 x 8)\n* Target: species\n* Properties: multiclass\n* Features (7):\n  - int (3): body_mass_g, flipper_length_mm, year\n  - dbl (2): bill_depth_mm, bill_length_mm\n  - fct (2): island, sex\n```\n:::\n:::\n\n\n`mlr3`에는 두 가지의 분류 태스크가 있습니다. 하나는 binary 분류로, 타겟 변수가 두 가지의 범주를 갖게 됩니다. 다른 하나는 타겟 변수가 세 개 이상의 범주를 갖는 multiclass 분류입니다.\n\n예를 들어 `sonar` 태스크는 타겟이 두 가지의 범주를 갖기 때문에 binary 분류입니다. 태스크의 속성(Properties)이 twoclass인 것을 확인할 수 있습니다.\n\n::: {.cell}\n\n```{.r .cell-code}\ntsk_sonar = tsk(\"sonar\")\ntsk_sonar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<TaskClassif:sonar> (208 x 61): Sonar: Mines vs. Rocks\n* Target: Class\n* Properties: twoclass\n* Features (60):\n  - dbl (60): V1, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V2,\n    V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V3, V30, V31,\n    V32, V33, V34, V35, V36, V37, V38, V39, V4, V40, V41, V42, V43,\n    V44, V45, V46, V47, V48, V49, V5, V50, V51, V52, V53, V54, V55,\n    V56, V57, V58, V59, V6, V60, V7, V8, V9\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntsk_sonar$class_names\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"M\" \"R\"\n```\n:::\n:::\n\n\n반면에 `tsk(penguins)`는 타겟의 범주가 세 개인 multiclass 분류 태스크입니다.\n\n::: {.cell}\n\n```{.r .cell-code}\ntsk_penguins\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<TaskClassif:penguins> (344 x 8): Palmer Penguins\n* Target: species\n* Properties: multiclass\n* Features (7):\n  - int (3): body_mass, flipper_length, year\n  - dbl (2): bill_depth, bill_length\n  - fct (2): island, sex\n```\n:::\n\n```{.r .cell-code}\ntsk_penguins$class_names\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Adelie\"    \"Chinstrap\" \"Gentoo\"   \n```\n:::\n:::\n\n\nbinary 태스크와 multiclass 태스크의 유일한 차이점은 **`$positive` 필드의 존재 여부**입니다. binary 태스크의 경우 예측 가능한 값이 두 가지밖에 없습니다. 따라서 어떤 값을 positive 또는 양성으로 예측할지를 지정해주어야 합니다. 나머지는 자동으로 negative 또는 음성으로 분류하게 됩니다. 만약 positive 클래스가 지정되지 않는다면, mlr3에서는 타겟 변수의 첫 번째 레벨(범주)를 positive로 간주하고 분류를 진행합니다. 이는 잘못된 예측을 하게 만드는 것이므로, 반드시 **`$positive`를 지정**해주어야 합니다.\n\n### LearnerClassif 와 MeasureClassif\n\nLeanerClassif에 내장된 분류 러너들은 회귀 러너들과 동일한 형태를 갖고 있습니다. 가장 큰 차이점은 분류 러너의 경우 예측 형태가 예측값의 클래스를 예측하는 `response` 이외에 예측값의 클래스에 속할 확률을 예측하는 `prob`도 존재한다는 것입니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlrn_rpart = lrn(\"classif.rpart\", predict_type = \"prob\")\nlrn_rpart$train(tsk_penguins, splits$train)\nprediction = lrn_rpart$predict(tsk_penguins, splits$test)\nprediction\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<PredictionClassif> for 103 observations:\n    row_ids     truth  response prob.Adelie prob.Chinstrap prob.Gentoo\n          1    Adelie    Adelie  0.98979592     0.01020408   0.0000000\n          6    Adelie    Adelie  0.98979592     0.01020408   0.0000000\n          7    Adelie    Adelie  0.98979592     0.01020408   0.0000000\n---                                                                   \n        334 Chinstrap Chinstrap  0.04347826     0.95652174   0.0000000\n        339 Chinstrap Chinstrap  0.04347826     0.95652174   0.0000000\n        343 Chinstrap    Gentoo  0.01111111     0.03333333   0.9555556\n```\n:::\n:::\n\n위의 예에서 알 수 있듯이 `response`에서는 `prob`에서 확인할 수 있는 예측확률이 가장 높게 나온 범주를 기준으로 예측한 클래스의 값이 나오게 됩니다.\n\n분류 측정값도 러너와 마찬가지로 회귀의 것과 생김새는 동일하지만, `predict_type`에 따라 다른 예측성능을 측정할 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.table(msr())[\n    task_type == \"classif\" & predict_type == \"prob\" &\n    task_properties != \"twoclass\"]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"key\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"label\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"task_type\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"packages\"],\"name\":[4],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"predict_type\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"task_properties\"],\"name\":[6],\"type\":[\"list\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"classif.logloss\",\"2\":\"Log Loss\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"prob\",\"6\":\"<chr [0]>\"},{\"1\":\"classif.mauc_au1p\",\"2\":\"Weighted average 1 vs. 1 multiclass AUC\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"prob\",\"6\":\"<chr [0]>\"},{\"1\":\"classif.mauc_au1u\",\"2\":\"Average 1 vs. 1 multiclass AUC\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"prob\",\"6\":\"<chr [0]>\"},{\"1\":\"classif.mauc_aunp\",\"2\":\"Weighted average 1 vs. rest multiclass AUC\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"prob\",\"6\":\"<chr [0]>\"},{\"1\":\"classif.mauc_aunu\",\"2\":\"Average 1 vs. rest multiclass AUC\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"prob\",\"6\":\"<chr [0]>\"},{\"1\":\"classif.mbrier\",\"2\":\"Multiclass Brier Score\",\"3\":\"classif\",\"4\":\"<chr [2]>\",\"5\":\"prob\",\"6\":\"<chr [0]>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n펭귄의 종을 예측하는 multiclass 분류 모델의 성능을 예측해보면 다음과 같습니다.\n\n::: {.cell}\n\n```{.r .cell-code}\nmeasures = msrs(c(\"classif.mbrier\", \"classif.logloss\", \"classif.acc\"))\nprediction$score(measures)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n classif.mbrier classif.logloss     classif.acc \n     0.05733419      0.14250164      0.97087379 \n```\n:::\n:::\n\n\n### PredictionClassif, Confusion Matrix, Thresholding\n\nPredictionClassif 객체는 회귀의 예측에는 없는 두 개의 중요한 요소가 있습니다. 첫 번째는 `$confusion` 필드이고, 두 번째는 `$set_threshold()` 메소드입니다.\n\n#### Confusion matrix\n\n혼동 행렬은 모델이 예측한 값이 잘 분류되었는지 실제 데이터와 비교하여 만들어지는 빈도 표입니다. `mlr3`에서는 `$confusion` 필드를 활용해 혼동행렬을 생성할 수 있습니다.\n\n::: {.cell}\n\n```{.r .cell-code}\nprediction$confusion\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           truth\nresponse    Adelie Chinstrap Gentoo\n  Adelie        45         0      0\n  Chinstrap      0        18      0\n  Gentoo         1         2     37\n```\n:::\n:::\n\n\n가로 방향으로 읽는 `truth`는 실제 데이터의 값을, `response`는 분류 모델이 예측한 값을 의미합니다. 대각선의 값들 (45, 18, 37)은 올바르게 예측한 값의 수이고, 나머지 값들은 잘못 예측(분류)한 값을 의미합니다.\n\n또한 `autoplot()`을 이용해 혼동행렬을 시각화할 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(prediction)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\nbinary 분류는 혼동행렬에서 좌측 상단(31)은 True positive, 우측 하단(25)는 True negative입니다. 우측 상단(7)과 좌측 하단(6)은 각각 False positive와 False negative입니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2023)\nsplits = partition(tsk_sonar)\nlrn_rpart$\n  train(tsk_sonar, splits$train)$\n  predict(tsk_sonar, splits$test)$\n  confusion\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        truth\nresponse  M  R\n       M 31  7\n       R  6 25\n```\n:::\n:::\n\n\n혼동행렬에서 계산되는 다양한 binary 분류의 성능들은 `mlr3` 리샘플링에서 다루도록 하겠습니다.\n\n#### Thresholding\n\nbinary 분류 모델의 중요한 요소는 바로 positive와 negative를 분류하는 기준인 threshold 를 설정하는 것입니다. multiclass 분류에서 response 값은 여러 개의 범주 중 가장 높은 확률로 예측된 범주였지만, binary 분류에서는 positive로 예측할 확률이  50% 이상이어야 positive로 분류될 수 있습니다.\n\n이처럼 threshold는 일반적으로 50%로 알려져 있습니다. 하지만 이 threshold는 예측하고자 하는 범주(클래스)의 불균형이 있는 경우 변경하여 사용할 수 있습니다.\n\n예를 들어 `german_credit` 태스크를 살펴보겠습니다. 1000명의 데이터 중에서 700명은 신용이 좋은 경우이고, 나머지 300명은 신용이 나쁜 경우입니다. 이 데이터를 활용해, 모든 사람이 좋은 신용을 가질 것이라고 예측함으로써 70%의 정확도를 보이는 예측 모델을 만들 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntask_credit = tsk(\"german_credit\")\nlrn_featureless = lrn(\"classif.featureless\", predict_type = \"prob\")\nsplit = partition(task_credit)\nlrn_featureless$train(task_credit, split$train)\nprediction = lrn_featureless$predict(task_credit, split$test)\nprediction$score(msr(\"classif.acc\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclassif.acc \n        0.7 \n```\n:::\n\n```{.r .cell-code}\nautoplot(prediction)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n언뜻 보기에는 모델의 성능이 좋아보이지만, 사실 이 경우는 신용이 나쁜 사람들을 모두 무시해버린 경우입니다. 이는 헬스케어 등과 같은 분야에서 큰 문제를 야기할 수 있습니다.\n\nThresholding은 클래스들이 다른 확률로 설정되어 예측될 수 있게끔 해줍니다. 따라서 50%를 기준으로 신용의 좋고 나쁨을 예측하는 것이 아니라, 데이터에 맞게 70% 미만을 기준으로 분류를 할 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprediction$set_threshold(0.7)\nprediction$score(msr(\"classif.acc\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclassif.acc \n  0.5242424 \n```\n:::\n\n```{.r .cell-code}\nautoplot(prediction)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\nthreshold를 설정하지 않았을 때보다 성능(정확도)은 나빠졌지만, 클래스 간의 관계(신용의 좋고 나쁨 간 비율)를 더욱 정확히 반영하고 있기 때문에 더 좋은 모델이라고 할 수 있습니다.\n\n### 지원되는 러너 알고리즘\n\n`mlr3`에서는 다양한 알고리즘들을 사용할 수 있습니다. `mlr3`에서 사용할 수 있는 러너들은 기본적으로 `mlr3` 이외에도 `mlr3learners`, `mlr3extralearners` 패키지를 통해 확인 가능합니다.\n\n이러한 러너들은 `mlr_learners` 딕셔너리를 통해 확인 가능합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlearners_dt = as.data.table(mlr_learners)\nlearners_dt\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"key\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"label\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"task_type\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"feature_types\"],\"name\":[4],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"packages\"],\"name\":[5],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"properties\"],\"name\":[6],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"predict_types\"],\"name\":[7],\"type\":[\"list\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"classif.cv_glmnet\",\"2\":\"NA\",\"3\":\"classif\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [4]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.debug\",\"2\":\"Debug Learner for Classification\",\"3\":\"classif\",\"4\":\"<chr [6]>\",\"5\":\"<chr [1]>\",\"6\":\"<chr [4]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.featureless\",\"2\":\"Featureless Classification Learner\",\"3\":\"classif\",\"4\":\"<chr [7]>\",\"5\":\"<chr [1]>\",\"6\":\"<chr [6]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.glmnet\",\"2\":\"NA\",\"3\":\"classif\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.kknn\",\"2\":\"NA\",\"3\":\"classif\",\"4\":\"<chr [5]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [2]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.lda\",\"2\":\"NA\",\"3\":\"classif\",\"4\":\"<chr [5]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.log_reg\",\"2\":\"NA\",\"3\":\"classif\",\"4\":\"<chr [6]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [2]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.multinom\",\"2\":\"NA\",\"3\":\"classif\",\"4\":\"<chr [4]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [4]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.naive_bayes\",\"2\":\"NA\",\"3\":\"classif\",\"4\":\"<chr [4]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [2]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.nnet\",\"2\":\"NA\",\"3\":\"classif\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.qda\",\"2\":\"NA\",\"3\":\"classif\",\"4\":\"<chr [5]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.ranger\",\"2\":\"NA\",\"3\":\"classif\",\"4\":\"<chr [6]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [6]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.rpart\",\"2\":\"Classification Tree\",\"3\":\"classif\",\"4\":\"<chr [5]>\",\"5\":\"<chr [2]>\",\"6\":\"<chr [6]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.svm\",\"2\":\"NA\",\"3\":\"classif\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [2]>\",\"7\":\"<chr [2]>\"},{\"1\":\"classif.xgboost\",\"2\":\"NA\",\"3\":\"classif\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [6]>\",\"7\":\"<chr [2]>\"},{\"1\":\"clust.MBatchKMeans\",\"2\":\"Mini Batch K-Means\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [4]>\",\"7\":\"<chr [2]>\"},{\"1\":\"clust.SimpleKMeans\",\"2\":\"K-Means (Weka)\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [1]>\"},{\"1\":\"clust.agnes\",\"2\":\"Agglomerative Hierarchical Clustering\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [1]>\"},{\"1\":\"clust.ap\",\"2\":\"Affinity Propagation Clustering\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [1]>\"},{\"1\":\"clust.cmeans\",\"2\":\"Fuzzy C-Means Clustering Learner\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [2]>\"},{\"1\":\"clust.cobweb\",\"2\":\"Cobweb Clustering\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [1]>\"},{\"1\":\"clust.dbscan\",\"2\":\"Density-Based Clustering\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [1]>\"},{\"1\":\"clust.diana\",\"2\":\"Divisive Hierarchical Clustering\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [1]>\"},{\"1\":\"clust.em\",\"2\":\"Expectation-Maximization Clustering\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [1]>\"},{\"1\":\"clust.fanny\",\"2\":\"Fuzzy Analysis Clustering\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [2]>\"},{\"1\":\"clust.featureless\",\"2\":\"Featureless Clustering\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [2]>\",\"6\":\"<chr [4]>\",\"7\":\"<chr [2]>\"},{\"1\":\"clust.ff\",\"2\":\"Farthest First Clustering\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [1]>\"},{\"1\":\"clust.hclust\",\"2\":\"Agglomerative Hierarchical Clustering\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [1]>\"},{\"1\":\"clust.kkmeans\",\"2\":\"Kernel K-Means\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [1]>\"},{\"1\":\"clust.kmeans\",\"2\":\"K-Means\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [4]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [1]>\"},{\"1\":\"clust.mclust\",\"2\":\"Gaussian Mixture Models Clustering\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [2]>\"},{\"1\":\"clust.meanshift\",\"2\":\"Mean Shift Clustering\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [1]>\"},{\"1\":\"clust.pam\",\"2\":\"Partitioning Around Medoids\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [1]>\"},{\"1\":\"clust.xmeans\",\"2\":\"X-means\",\"3\":\"clust\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [3]>\",\"7\":\"<chr [1]>\"},{\"1\":\"regr.cv_glmnet\",\"2\":\"NA\",\"3\":\"regr\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [2]>\",\"7\":\"<chr [1]>\"},{\"1\":\"regr.debug\",\"2\":\"Debug Learner for Regression\",\"3\":\"regr\",\"4\":\"<chr [6]>\",\"5\":\"<chr [1]>\",\"6\":\"<chr [1]>\",\"7\":\"<chr [2]>\"},{\"1\":\"regr.featureless\",\"2\":\"Featureless Regression Learner\",\"3\":\"regr\",\"4\":\"<chr [7]>\",\"5\":\"<chr [2]>\",\"6\":\"<chr [4]>\",\"7\":\"<chr [2]>\"},{\"1\":\"regr.glmnet\",\"2\":\"NA\",\"3\":\"regr\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [1]>\",\"7\":\"<chr [1]>\"},{\"1\":\"regr.kknn\",\"2\":\"NA\",\"3\":\"regr\",\"4\":\"<chr [5]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [0]>\",\"7\":\"<chr [1]>\"},{\"1\":\"regr.km\",\"2\":\"NA\",\"3\":\"regr\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [0]>\",\"7\":\"<chr [2]>\"},{\"1\":\"regr.lm\",\"2\":\"NA\",\"3\":\"regr\",\"4\":\"<chr [5]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [2]>\",\"7\":\"<chr [2]>\"},{\"1\":\"regr.nnet\",\"2\":\"NA\",\"3\":\"regr\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [1]>\",\"7\":\"<chr [1]>\"},{\"1\":\"regr.ranger\",\"2\":\"NA\",\"3\":\"regr\",\"4\":\"<chr [6]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [4]>\",\"7\":\"<chr [2]>\"},{\"1\":\"regr.rpart\",\"2\":\"Regression Tree\",\"3\":\"regr\",\"4\":\"<chr [5]>\",\"5\":\"<chr [2]>\",\"6\":\"<chr [4]>\",\"7\":\"<chr [1]>\"},{\"1\":\"regr.svm\",\"2\":\"NA\",\"3\":\"regr\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [0]>\",\"7\":\"<chr [1]>\"},{\"1\":\"regr.xgboost\",\"2\":\"NA\",\"3\":\"regr\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [4]>\",\"7\":\"<chr [1]>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n또한 해당 러너의 딕셔너리에서 특정 조건을 만족하는 값들만 선택하여 확인할 수 있습니다.\n\n::: {.cell}\n\n```{.r .cell-code}\nlearners_dt[task_type == \"regr\" &\n  sapply(predict_types, function(x) \"se\" %in% x)]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"key\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"label\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"task_type\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"feature_types\"],\"name\":[4],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"packages\"],\"name\":[5],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"properties\"],\"name\":[6],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"predict_types\"],\"name\":[7],\"type\":[\"list\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"regr.debug\",\"2\":\"Debug Learner for Regression\",\"3\":\"regr\",\"4\":\"<chr [6]>\",\"5\":\"<chr [1]>\",\"6\":\"<chr [1]>\",\"7\":\"<chr [2]>\"},{\"1\":\"regr.featureless\",\"2\":\"Featureless Regression Learner\",\"3\":\"regr\",\"4\":\"<chr [7]>\",\"5\":\"<chr [2]>\",\"6\":\"<chr [4]>\",\"7\":\"<chr [2]>\"},{\"1\":\"regr.km\",\"2\":\"NA\",\"3\":\"regr\",\"4\":\"<chr [3]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [0]>\",\"7\":\"<chr [2]>\"},{\"1\":\"regr.lm\",\"2\":\"NA\",\"3\":\"regr\",\"4\":\"<chr [5]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [2]>\",\"7\":\"<chr [2]>\"},{\"1\":\"regr.ranger\",\"2\":\"NA\",\"3\":\"regr\",\"4\":\"<chr [6]>\",\"5\":\"<chr [3]>\",\"6\":\"<chr [4]>\",\"7\":\"<chr [2]>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n## 결론\n\n이번 챕터에서는 `mlr3`를 활용해 머신러닝 알고리즘을 다루는 방법에 대해 살펴보았습니다. 태스크를 이용해 학습시키고자 하는 데이터를 만들고, 러너를 이용해 모델을 학습시킨 후, 예측하였습니다. 또한 `Measure` 클래스를 이용해 모델이 예측한 값을 바탕으로 모델의 성능을 계산할 수 있었습니다.\n\n이번 챕터에서 가장 중요한 내용들을 표로 요약하면 아래와 같습니다.\n\n| Class | Constructor/function| Fields/Methods|\n|-------|---------------------|---------------|\n|`Task`   | `tsk()`/`as_task_X()`   | `$filter()`; `$data()`\n|`Learner`| `lrn()`/`lrns()`        | `$train()`; `$predict()`\n|`Prediction`| `learner$predict()`| `$score()`;\n|`Measure`| `msr()`/`msrs()`        |\n\n------------------------------------------------------------------------\n\n## 레퍼런스\n\n-   <https://mlr3.mlr-org.com/>\n\n-   <https://mlr3book.mlr-org.com/chapters/chapter2/data_and_basic_modeling.html#sec-basics-regr-experiment>\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}