---
title: "dplyr group_by"
description:  "dplyr를 활용한 그룹별 데이터 처리"
date: '2023-02-01'
categories: [dplyr, R]
---

### `group_by()` : 그룹별 계산

`group_by()`는 특정 집단의 범주별로 어떤 값들을 요약하거나 계산할 때 많이 활용되는 함수입니다.

```{r}
library(dplyr)
starwars %>%
  group_by(species, sex) %>%
  select(height, mass) %>%
  summarise(
    height = mean(height, na.rm = TRUE),
    mass = mean(mass, na.rm = TRUE)
  )
```

```{r}
by_species <- starwars |> group_by(species)
by_sex_gender <- starwars |> group_by(sex,gender)
```

출력했을 때, 데이터가 그룹으로 묶인 것을 알 수 있습니다.

```{r}
by_species
by_sex_gender
```

`tally()` 를 이용해 그룹별 n수를 파악할 수도 있습니다.

`sort` 인자를 통해서 그룹 수가 많은 순서대로 정렬할 수 있습니다.

```{r}
by_species |> tally()
by_sex_gender |> 
  tally(sort=T)
```

`group_by()` 안에서 새로운 변수를 만들어 그룹별 계산을 진행할 수도 있습니다.

```{r}
starwars |> 
  group_by(bmi_cat = cut(mass/(height/100)^2, breaks = c(0,18,23,25,30,Inf))) |> 
  tally()
```

### 그룹 변수 정보 확인

그룹 변수를 지정해준 경우, `group_keys()` 를 통해 그룹 변수의 범주를 확인할 수 있습니다.

```{r}
by_species |> group_keys()
```

그룹 변수의 이름만 확인할 때는 `group_vars()` 를 사용합니다.

```{r}
by_sex_gender |> group_vars()
```

### 그룹 변수 변경 및 추가

기존의 그룹처리 되어있는 데이터에 `group_by()` 를 진행할 시, 새로운 그룹 변수로 덮어씌워집니다.

```{r}
by_species |> 
  group_by(homeworld) |> 
  tally()
```

`.add=T` 인자를 추가할 경우, 새로운 그룹 변수를 추가할 수도 있습니다.

```{r}
by_species |> 
  group_by(homeworld, .add=T) |> 
  tally()
```

### 그룹 변수 제거

그룹 처리된 데이터를 제거하고 싶은 경우, `ungroup()` 을 사용합니다.

```{r}
by_species |> 
  ungroup() |> 
  tally()
```

물론 특정 그룹 변수만 제외할 수도 있습니다.

```{r}
by_sex_gender |> 
  ungroup(sex) |> 
  tally()
```

### `group_by()`와 함께 쓰는 동사

#### 1. `summarise()`

`summarise()`와 `group_by()`가 함께 사용될 경우, 그룹별로 요약 계산을 수행합니다.

```{r}
by_species |> 
  summarise(
    n=n(),
    mean_height = mean(height,na.rm=T)
  )
```

.groups= 인자는 출력되는 결과의 그룹 구조를 다루는 인자입니다.

```{r}
by_sex_gender |> 
  summarise(n=n(), .groups = 'keep')

by_sex_gender |> 
  summarise(n=n(), .groups = 'drop')
```

#### 2. `select()`, `rename()`, `relocate()`

`rename()`과 `relocate()`는 `group_by()`와 관계없이 동일한 작업을 수행합니다. 각각 열의 이름과 위치에만 영향을 미치게 때문입니다.

`select()`가 `group_by()`와 함께 쓰이면 그룹 변수가 항상 함께 선택됩니다.

```{r}
by_species |> select(mass)
```

그룹 변수가 함께 선택되는 것을 원치 않는다면 `ungroup()`을 먼저 사용해야 합니다.

```{r}
by_species |> ungroup() |> select(mass)
```

#### 3. `arrange()`

`arrange()`가 `group_by()`와 함께 쓰일 경우, 그냥 사용하게 되면 `group_by()` 가 없을 때와 동일합니다. 그러나 `.by_group=T` 인자를 통해 그룹 변수를 기준으로 정렬되어 결과가 출력됩니다.

```{r}
by_species |> 
  arrange(desc(mass)) |> 
  relocate(species, mass)

by_species |> 
  arrange(desc(mass), .by_group = T) |> 
  relocate(species, mass)

```

#### 4. `mutate()`, `transmute()`

group_by()와 함께 새로운 변수를 생성할 경우, 같은 그룹의 경우 동일한 값이 들어가게 됩니다.

#### 5. `filter()`

`filter()`와 `group_by()`를 함께 사용하여, 특정 그룹의 수를 기준으로 선택할 때 사용할 수 있습니다.

아래의 예시에서는 그룹 별 수가 1인 경우를 모두 제외하고 선택한 결과입니다.

```{r}
by_species |> 
  filter(n()!=1) |> 
  tally()
```

#### 6. `slice()`

slice()와 slice() 계열 함수들이 group_by() 와 함께 사용될 경우, 그룹별로 해당되는 값이 출력됩니다.

```{r}
# 그룹별 첫번째 값 
by_species |> 
  slice(1) 

by_species |>
  filter(!is.na(height)) |> 
  slice_min(height,n=2)
```
