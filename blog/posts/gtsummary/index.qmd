---
title: "통계 테이블 끝판왕 gtsummary"
description: "분석결과 보고를 위한 최고의 테이블 패키지"
author: "JYH"
date: "2023-04-03"
categories: [R, table, gtsummary]
image: "https://www.danieldsjoberg.com/gtsummary/logo.png"
---

## 패키지 소개

![](https://www.danieldsjoberg.com/gtsummary/logo.png){fig-align="center" width="350"}

데이터 요약 & 회귀분석 결과 테이블 만들기

## 필요한 패키지 설치

```{r}
#| eval: false
#| echo: true
library(gtsummary)
library(gt)
```

```{r}
#| echo: false
library(gtsummary)
library(gt)
library(data.table)
```

## 1. Baseline characteristics

-   data의 일반 특성 요약
-   집단 별 통계량 표시

### 기본 테이블 {.smaller}

```{r warning=FALSE}
#| echo: true
#| code-line-numbers: "|3|4|6|"
#| output-location: column-fragment
library(gtsummary)
library(gt)
library(survival)
library(flextable)
tbl_summary(
  data = trial,
  by = trt
) |> 
  add_overall() |> 
  as_flex_table()
```

### 통계량 변경 {.smaller}

테이블에 표시되는 숫자의 양식을 변경해줄 수 있습니다. 예를 들어, 연속형(continuous) 변수의 경우 기본적으로 median(IQR)로 표시가 됩니다. tbl_summary()의 `statistic` 인자를 통해 `mean ± sd` 형태로 표시할 수 있습니다.

주의해야 할 점은 항상 `{}`가 붙은 문자 형태(`""`)로 사용해야 한다는 것입니다.

```{r}
#| code-line-numbers: "|4|5-7|8-11|12-15|16|"
#| output-location: column-fragment
tbl_summary(
  data = trial,
  by = trt,
  include = c(age, marker, stage, grade, response, death, ttdeath),
  type = list(
    c(stage, grade)~ "categorical"
  ),
  statistic = list(
    all_continuous() ~"{mean} ± {sd}",
    all_categorical() ~ "{n} ({p})"
  ),
  digits = list(
    all_continuous() ~ 1,
    all_categorical() ~ c(0,1)
  ),
  missing = "no",
) |> 
  add_overall() |> 
  as_flex_table()
```

### P-value {.smaller}

```{r}
#| code-line-numbers: "|17-24|"
#| output-location: column-fragment
tbl_summary(
   data = trial,
  by = trt,
  include = c(age, marker, stage, grade, response, death, ttdeath),
  statistic = list(
    all_continuous() ~"{mean} ± {sd}",
    # statistic = "{median} ({p25}-{p75})",
    all_categorical() ~ "{n} ({p})"
  ),
  digits = list(
    all_continuous() ~ 1,
    all_categorical() ~ c(0,1)
  ),
  missing = "no",
) |> 
  add_overall() |> 
  add_p(
    test = list(
      all_continuous() ~ "t.test",
      all_categorical() ~ "chisq.test"
    ),
    pvalue_fun = ~style_pvalue(., digits = 3)
  ) |> 
    as_flex_table()
```

## 2. Regression table 만들기 {.smaller}

### 단순 회귀분석(Univariable regression)

단순회귀분석의 경우,

```{r}
#| echo: true
library(survival)
uni_tbl <- tbl_uvregression(
  data = trial |> select(age, marker, stage, grade, response, death, ttdeath),
  method = coxph,
  y = Surv(ttdeath, death),
  exponentiate = T,
  hide_n = T
  ) |> 
  modify_footnote(everything() ~ NA)
uni_tbl |> as_flex_table()
```

### 다변량 회귀분석(Multivariable regression)

다중 회귀분석 테이블을 만드는 함수는 `tbl_regression()`입니다. 단순 회귀분석을 만드는 `tbl_uvregression()`과 다르게, 먼저 회귀식을 작성한 뒤에 `tbl_regression()`의 인자로 사용해야 합니다.

```{r}
fit <- coxph(Surv(ttdeath, death) ~ age +  marker + stage + grade + response, data = trial)
mult_tbl <- tbl_regression(
  x = fit,
  exponentiate = T,
  pvalue_fun = ~ style_pvalue(., digits = 3),
  estimate_fun = ~style_ratio(., digits = 2)
) |> 
  bold_p() |> 
  # modify_column_merge(pattern = "{estimate} ({conf.low}-{conf.high})",
  #                     rows = !is.na(estimate)) |> 
  add_significance_stars(hide_ci = T, hide_se = T) |> 
  modify_header(
    label = "**Variable**",
    estimate = "**OR (95% CI)**",
    p.value = "**P value**"
  ) |> 
  modify_footnote(everything() ~ NA)
mult_tbl |> as_flex_table()
```

### 두 개의 테이블 합치기

이제 단순 회귀분석 테이블과 다중 회귀분석 테이블을 합쳐보도록 하겠습니다.

```{r}
tbl_merge(
  list(uni_tbl, mult_tbl),
  tab_spanner = 
    c("**Univariable**", "**Multivariable**")
) |> 
  as_flex_table()
```

## 참고자료

https://www.danieldsjoberg.com/gtsummary/reference/tbl_summary.html
